/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.2
 * source: api.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
import * as grpc_web_1 from "grpc-web";
export namespace gen_grpc {
    export enum ErrCode {
        emErrCode_Ok = 0,
        emErrCode_UnknownErr = 1,
        emErrCode_Timeout = 2,
        emErrCode_SessNotExisted = 100,
        emErrCode_UserNotRegistered = 200,
        emErrCode_UserAlreadyRegistered = 201,
        emErrCode_UserFailedToAuth = 202,
        emErrCode_IsContact = 300,
        emErrCode_IsNotContact = 301,
        emErrCode_GroupNotExisted = 400,
        emErrCode_UserNotInGroup = 401
    }
    export enum ChatMsgType {
        emChatMsgType_Text = 0,
        emChatMsgType_MarkRead = 50,
        emChatMsgType_ContactAddReq = 100,
        emChatMsgType_ContactAdded = 101,
        emChatMsgType_ContactRejected = 102,
        emChatMsgType_ContactDeleted = 103,
        emChatMsgType_GroupCreated = 200,
        emChatMsgType_GroupDeleted = 201,
        emChatMsgType_GroupJoinReq = 202,
        emChatMsgType_GroupUserJoined = 203,
        emChatMsgType_GroupRejected = 204,
        emChatMsgType_GroupUserLeft = 205,
        emChatMsgType_GroupUserRemoved = 206
    }
    export class SessUserLoginReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            username?: string;
            password?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
            }
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            username?: string;
            password?: string;
        }): SessUserLoginReq {
            const message = new SessUserLoginReq({});
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            return message;
        }
        toObject() {
            const data: {
                username?: string;
                password?: string;
            } = {};
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.username.length)
                writer.writeString(1, this.username);
            if (this.password.length)
                writer.writeString(2, this.password);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SessUserLoginReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SessUserLoginReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.username = reader.readString();
                        break;
                    case 2:
                        message.password = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SessUserLoginReq {
            return SessUserLoginReq.deserialize(bytes);
        }
    }
    export class SessUserLoginRes extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            errCode?: ErrCode;
            sessId?: string;
            uid?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("errCode" in data && data.errCode != undefined) {
                    this.errCode = data.errCode;
                }
                if ("sessId" in data && data.sessId != undefined) {
                    this.sessId = data.sessId;
                }
                if ("uid" in data && data.uid != undefined) {
                    this.uid = data.uid;
                }
            }
        }
        get errCode() {
            return pb_1.Message.getFieldWithDefault(this, 1, ErrCode.emErrCode_Ok) as ErrCode;
        }
        set errCode(value: ErrCode) {
            pb_1.Message.setField(this, 1, value);
        }
        get sessId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set sessId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get uid() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set uid(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            errCode?: ErrCode;
            sessId?: string;
            uid?: number;
        }): SessUserLoginRes {
            const message = new SessUserLoginRes({});
            if (data.errCode != null) {
                message.errCode = data.errCode;
            }
            if (data.sessId != null) {
                message.sessId = data.sessId;
            }
            if (data.uid != null) {
                message.uid = data.uid;
            }
            return message;
        }
        toObject() {
            const data: {
                errCode?: ErrCode;
                sessId?: string;
                uid?: number;
            } = {};
            if (this.errCode != null) {
                data.errCode = this.errCode;
            }
            if (this.sessId != null) {
                data.sessId = this.sessId;
            }
            if (this.uid != null) {
                data.uid = this.uid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.errCode != ErrCode.emErrCode_Ok)
                writer.writeEnum(1, this.errCode);
            if (this.sessId.length)
                writer.writeString(2, this.sessId);
            if (this.uid != 0)
                writer.writeUint64(3, this.uid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SessUserLoginRes {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SessUserLoginRes();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.errCode = reader.readEnum();
                        break;
                    case 2:
                        message.sessId = reader.readString();
                        break;
                    case 3:
                        message.uid = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SessUserLoginRes {
            return SessUserLoginRes.deserialize(bytes);
        }
    }
    export class SessUserLogoutReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sessId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sessId" in data && data.sessId != undefined) {
                    this.sessId = data.sessId;
                }
            }
        }
        get sessId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sessId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            sessId?: string;
        }): SessUserLogoutReq {
            const message = new SessUserLogoutReq({});
            if (data.sessId != null) {
                message.sessId = data.sessId;
            }
            return message;
        }
        toObject() {
            const data: {
                sessId?: string;
            } = {};
            if (this.sessId != null) {
                data.sessId = this.sessId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sessId.length)
                writer.writeString(1, this.sessId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SessUserLogoutReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SessUserLogoutReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sessId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SessUserLogoutReq {
            return SessUserLogoutReq.deserialize(bytes);
        }
    }
    export class SessUserLogoutRes extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            errCode?: ErrCode;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("errCode" in data && data.errCode != undefined) {
                    this.errCode = data.errCode;
                }
            }
        }
        get errCode() {
            return pb_1.Message.getFieldWithDefault(this, 1, ErrCode.emErrCode_Ok) as ErrCode;
        }
        set errCode(value: ErrCode) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            errCode?: ErrCode;
        }): SessUserLogoutRes {
            const message = new SessUserLogoutRes({});
            if (data.errCode != null) {
                message.errCode = data.errCode;
            }
            return message;
        }
        toObject() {
            const data: {
                errCode?: ErrCode;
            } = {};
            if (this.errCode != null) {
                data.errCode = this.errCode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.errCode != ErrCode.emErrCode_Ok)
                writer.writeEnum(1, this.errCode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SessUserLogoutRes {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SessUserLogoutRes();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.errCode = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SessUserLogoutRes {
            return SessUserLogoutRes.deserialize(bytes);
        }
    }
    export class UmContactInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            uid?: number;
            username?: string;
            nickname?: string;
            noteName?: string;
            email?: string;
            avatar?: string;
            isMutualContact?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("uid" in data && data.uid != undefined) {
                    this.uid = data.uid;
                }
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("nickname" in data && data.nickname != undefined) {
                    this.nickname = data.nickname;
                }
                if ("noteName" in data && data.noteName != undefined) {
                    this.noteName = data.noteName;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("avatar" in data && data.avatar != undefined) {
                    this.avatar = data.avatar;
                }
                if ("isMutualContact" in data && data.isMutualContact != undefined) {
                    this.isMutualContact = data.isMutualContact;
                }
            }
        }
        get uid() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set uid(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get nickname() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set nickname(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get noteName() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set noteName(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get avatar() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set avatar(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get isMutualContact() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set isMutualContact(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            uid?: number;
            username?: string;
            nickname?: string;
            noteName?: string;
            email?: string;
            avatar?: string;
            isMutualContact?: boolean;
        }): UmContactInfo {
            const message = new UmContactInfo({});
            if (data.uid != null) {
                message.uid = data.uid;
            }
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.nickname != null) {
                message.nickname = data.nickname;
            }
            if (data.noteName != null) {
                message.noteName = data.noteName;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.avatar != null) {
                message.avatar = data.avatar;
            }
            if (data.isMutualContact != null) {
                message.isMutualContact = data.isMutualContact;
            }
            return message;
        }
        toObject() {
            const data: {
                uid?: number;
                username?: string;
                nickname?: string;
                noteName?: string;
                email?: string;
                avatar?: string;
                isMutualContact?: boolean;
            } = {};
            if (this.uid != null) {
                data.uid = this.uid;
            }
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.nickname != null) {
                data.nickname = this.nickname;
            }
            if (this.noteName != null) {
                data.noteName = this.noteName;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.avatar != null) {
                data.avatar = this.avatar;
            }
            if (this.isMutualContact != null) {
                data.isMutualContact = this.isMutualContact;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.uid != 0)
                writer.writeUint64(1, this.uid);
            if (this.username.length)
                writer.writeString(2, this.username);
            if (this.nickname.length)
                writer.writeString(3, this.nickname);
            if (this.noteName.length)
                writer.writeString(4, this.noteName);
            if (this.email.length)
                writer.writeString(5, this.email);
            if (this.avatar.length)
                writer.writeString(6, this.avatar);
            if (this.isMutualContact != false)
                writer.writeBool(7, this.isMutualContact);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UmContactInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UmContactInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.uid = reader.readUint64();
                        break;
                    case 2:
                        message.username = reader.readString();
                        break;
                    case 3:
                        message.nickname = reader.readString();
                        break;
                    case 4:
                        message.noteName = reader.readString();
                        break;
                    case 5:
                        message.email = reader.readString();
                        break;
                    case 6:
                        message.avatar = reader.readString();
                        break;
                    case 7:
                        message.isMutualContact = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UmContactInfo {
            return UmContactInfo.deserialize(bytes);
        }
    }
    export class UmRegisterReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            username?: string;
            password?: string;
            nickname?: string;
            email?: string;
            avatar?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
                if ("nickname" in data && data.nickname != undefined) {
                    this.nickname = data.nickname;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("avatar" in data && data.avatar != undefined) {
                    this.avatar = data.avatar;
                }
            }
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get nickname() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set nickname(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get avatar() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set avatar(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            username?: string;
            password?: string;
            nickname?: string;
            email?: string;
            avatar?: string;
        }): UmRegisterReq {
            const message = new UmRegisterReq({});
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            if (data.nickname != null) {
                message.nickname = data.nickname;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.avatar != null) {
                message.avatar = data.avatar;
            }
            return message;
        }
        toObject() {
            const data: {
                username?: string;
                password?: string;
                nickname?: string;
                email?: string;
                avatar?: string;
            } = {};
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            if (this.nickname != null) {
                data.nickname = this.nickname;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.avatar != null) {
                data.avatar = this.avatar;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.username.length)
                writer.writeString(1, this.username);
            if (this.password.length)
                writer.writeString(2, this.password);
            if (this.nickname.length)
                writer.writeString(3, this.nickname);
            if (this.email.length)
                writer.writeString(4, this.email);
            if (this.avatar.length)
                writer.writeString(5, this.avatar);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UmRegisterReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UmRegisterReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.username = reader.readString();
                        break;
                    case 2:
                        message.password = reader.readString();
                        break;
                    case 3:
                        message.nickname = reader.readString();
                        break;
                    case 4:
                        message.email = reader.readString();
                        break;
                    case 5:
                        message.avatar = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UmRegisterReq {
            return UmRegisterReq.deserialize(bytes);
        }
    }
    export class UmRegisterRes extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            errCode?: ErrCode;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("errCode" in data && data.errCode != undefined) {
                    this.errCode = data.errCode;
                }
            }
        }
        get errCode() {
            return pb_1.Message.getFieldWithDefault(this, 1, ErrCode.emErrCode_Ok) as ErrCode;
        }
        set errCode(value: ErrCode) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            errCode?: ErrCode;
        }): UmRegisterRes {
            const message = new UmRegisterRes({});
            if (data.errCode != null) {
                message.errCode = data.errCode;
            }
            return message;
        }
        toObject() {
            const data: {
                errCode?: ErrCode;
            } = {};
            if (this.errCode != null) {
                data.errCode = this.errCode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.errCode != ErrCode.emErrCode_Ok)
                writer.writeEnum(1, this.errCode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UmRegisterRes {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UmRegisterRes();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.errCode = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UmRegisterRes {
            return UmRegisterRes.deserialize(bytes);
        }
    }
    export class UmUnregisterReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sessId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sessId" in data && data.sessId != undefined) {
                    this.sessId = data.sessId;
                }
            }
        }
        get sessId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sessId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            sessId?: string;
        }): UmUnregisterReq {
            const message = new UmUnregisterReq({});
            if (data.sessId != null) {
                message.sessId = data.sessId;
            }
            return message;
        }
        toObject() {
            const data: {
                sessId?: string;
            } = {};
            if (this.sessId != null) {
                data.sessId = this.sessId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sessId.length)
                writer.writeString(1, this.sessId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UmUnregisterReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UmUnregisterReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sessId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UmUnregisterReq {
            return UmUnregisterReq.deserialize(bytes);
        }
    }
    export class UmUnregisterRes extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            errCode?: ErrCode;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("errCode" in data && data.errCode != undefined) {
                    this.errCode = data.errCode;
                }
            }
        }
        get errCode() {
            return pb_1.Message.getFieldWithDefault(this, 1, ErrCode.emErrCode_Ok) as ErrCode;
        }
        set errCode(value: ErrCode) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            errCode?: ErrCode;
        }): UmUnregisterRes {
            const message = new UmUnregisterRes({});
            if (data.errCode != null) {
                message.errCode = data.errCode;
            }
            return message;
        }
        toObject() {
            const data: {
                errCode?: ErrCode;
            } = {};
            if (this.errCode != null) {
                data.errCode = this.errCode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.errCode != ErrCode.emErrCode_Ok)
                writer.writeEnum(1, this.errCode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UmUnregisterRes {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UmUnregisterRes();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.errCode = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UmUnregisterRes {
            return UmUnregisterRes.deserialize(bytes);
        }
    }
    export class UmUserUpdateInfoReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sessId?: string;
            nickname?: string;
            email?: string;
            avatar?: string;
            password?: string;
            newPassword?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sessId" in data && data.sessId != undefined) {
                    this.sessId = data.sessId;
                }
                if ("nickname" in data && data.nickname != undefined) {
                    this.nickname = data.nickname;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("avatar" in data && data.avatar != undefined) {
                    this.avatar = data.avatar;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
                if ("newPassword" in data && data.newPassword != undefined) {
                    this.newPassword = data.newPassword;
                }
            }
        }
        get sessId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sessId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get nickname() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set nickname(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get avatar() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set avatar(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get newPassword() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set newPassword(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            sessId?: string;
            nickname?: string;
            email?: string;
            avatar?: string;
            password?: string;
            newPassword?: string;
        }): UmUserUpdateInfoReq {
            const message = new UmUserUpdateInfoReq({});
            if (data.sessId != null) {
                message.sessId = data.sessId;
            }
            if (data.nickname != null) {
                message.nickname = data.nickname;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.avatar != null) {
                message.avatar = data.avatar;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            if (data.newPassword != null) {
                message.newPassword = data.newPassword;
            }
            return message;
        }
        toObject() {
            const data: {
                sessId?: string;
                nickname?: string;
                email?: string;
                avatar?: string;
                password?: string;
                newPassword?: string;
            } = {};
            if (this.sessId != null) {
                data.sessId = this.sessId;
            }
            if (this.nickname != null) {
                data.nickname = this.nickname;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.avatar != null) {
                data.avatar = this.avatar;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            if (this.newPassword != null) {
                data.newPassword = this.newPassword;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sessId.length)
                writer.writeString(1, this.sessId);
            if (this.nickname.length)
                writer.writeString(2, this.nickname);
            if (this.email.length)
                writer.writeString(3, this.email);
            if (this.avatar.length)
                writer.writeString(4, this.avatar);
            if (this.password.length)
                writer.writeString(5, this.password);
            if (this.newPassword.length)
                writer.writeString(6, this.newPassword);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UmUserUpdateInfoReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UmUserUpdateInfoReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sessId = reader.readString();
                        break;
                    case 2:
                        message.nickname = reader.readString();
                        break;
                    case 3:
                        message.email = reader.readString();
                        break;
                    case 4:
                        message.avatar = reader.readString();
                        break;
                    case 5:
                        message.password = reader.readString();
                        break;
                    case 6:
                        message.newPassword = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UmUserUpdateInfoReq {
            return UmUserUpdateInfoReq.deserialize(bytes);
        }
    }
    export class UmUserUpdateInfoRes extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            errCode?: ErrCode;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("errCode" in data && data.errCode != undefined) {
                    this.errCode = data.errCode;
                }
            }
        }
        get errCode() {
            return pb_1.Message.getFieldWithDefault(this, 1, ErrCode.emErrCode_Ok) as ErrCode;
        }
        set errCode(value: ErrCode) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            errCode?: ErrCode;
        }): UmUserUpdateInfoRes {
            const message = new UmUserUpdateInfoRes({});
            if (data.errCode != null) {
                message.errCode = data.errCode;
            }
            return message;
        }
        toObject() {
            const data: {
                errCode?: ErrCode;
            } = {};
            if (this.errCode != null) {
                data.errCode = this.errCode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.errCode != ErrCode.emErrCode_Ok)
                writer.writeEnum(1, this.errCode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UmUserUpdateInfoRes {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UmUserUpdateInfoRes();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.errCode = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UmUserUpdateInfoRes {
            return UmUserUpdateInfoRes.deserialize(bytes);
        }
    }
    export class UmContactGetListReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sessId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sessId" in data && data.sessId != undefined) {
                    this.sessId = data.sessId;
                }
            }
        }
        get sessId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sessId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            sessId?: string;
        }): UmContactGetListReq {
            const message = new UmContactGetListReq({});
            if (data.sessId != null) {
                message.sessId = data.sessId;
            }
            return message;
        }
        toObject() {
            const data: {
                sessId?: string;
            } = {};
            if (this.sessId != null) {
                data.sessId = this.sessId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sessId.length)
                writer.writeString(1, this.sessId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UmContactGetListReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UmContactGetListReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sessId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UmContactGetListReq {
            return UmContactGetListReq.deserialize(bytes);
        }
    }
    export class UmContactGetListRes extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            errCode?: ErrCode;
            contactList?: UmContactInfo[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("errCode" in data && data.errCode != undefined) {
                    this.errCode = data.errCode;
                }
                if ("contactList" in data && data.contactList != undefined) {
                    this.contactList = data.contactList;
                }
            }
        }
        get errCode() {
            return pb_1.Message.getFieldWithDefault(this, 1, ErrCode.emErrCode_Ok) as ErrCode;
        }
        set errCode(value: ErrCode) {
            pb_1.Message.setField(this, 1, value);
        }
        get contactList() {
            return pb_1.Message.getRepeatedWrapperField(this, UmContactInfo, 2) as UmContactInfo[];
        }
        set contactList(value: UmContactInfo[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            errCode?: ErrCode;
            contactList?: ReturnType<typeof UmContactInfo.prototype.toObject>[];
        }): UmContactGetListRes {
            const message = new UmContactGetListRes({});
            if (data.errCode != null) {
                message.errCode = data.errCode;
            }
            if (data.contactList != null) {
                message.contactList = data.contactList.map(item => UmContactInfo.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                errCode?: ErrCode;
                contactList?: ReturnType<typeof UmContactInfo.prototype.toObject>[];
            } = {};
            if (this.errCode != null) {
                data.errCode = this.errCode;
            }
            if (this.contactList != null) {
                data.contactList = this.contactList.map((item: UmContactInfo) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.errCode != ErrCode.emErrCode_Ok)
                writer.writeEnum(1, this.errCode);
            if (this.contactList.length)
                writer.writeRepeatedMessage(2, this.contactList, (item: UmContactInfo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UmContactGetListRes {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UmContactGetListRes();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.errCode = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.contactList, () => pb_1.Message.addToRepeatedWrapperField(message, 2, UmContactInfo.deserialize(reader), UmContactInfo));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UmContactGetListRes {
            return UmContactGetListRes.deserialize(bytes);
        }
    }
    export class UmContactGetInfoReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sessId?: string;
            userId?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sessId" in data && data.sessId != undefined) {
                    this.sessId = data.sessId;
                }
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
            }
        }
        get sessId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sessId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set userId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            sessId?: string;
            userId?: number;
        }): UmContactGetInfoReq {
            const message = new UmContactGetInfoReq({});
            if (data.sessId != null) {
                message.sessId = data.sessId;
            }
            if (data.userId != null) {
                message.userId = data.userId;
            }
            return message;
        }
        toObject() {
            const data: {
                sessId?: string;
                userId?: number;
            } = {};
            if (this.sessId != null) {
                data.sessId = this.sessId;
            }
            if (this.userId != null) {
                data.userId = this.userId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sessId.length)
                writer.writeString(1, this.sessId);
            if (this.userId != 0)
                writer.writeUint64(2, this.userId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UmContactGetInfoReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UmContactGetInfoReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sessId = reader.readString();
                        break;
                    case 2:
                        message.userId = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UmContactGetInfoReq {
            return UmContactGetInfoReq.deserialize(bytes);
        }
    }
    export class UmContactGetInfoRes extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            errCode?: ErrCode;
            userInfo?: UmContactInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("errCode" in data && data.errCode != undefined) {
                    this.errCode = data.errCode;
                }
                if ("userInfo" in data && data.userInfo != undefined) {
                    this.userInfo = data.userInfo;
                }
            }
        }
        get errCode() {
            return pb_1.Message.getFieldWithDefault(this, 1, ErrCode.emErrCode_Ok) as ErrCode;
        }
        set errCode(value: ErrCode) {
            pb_1.Message.setField(this, 1, value);
        }
        get userInfo() {
            return pb_1.Message.getWrapperField(this, UmContactInfo, 2) as UmContactInfo;
        }
        set userInfo(value: UmContactInfo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_userInfo() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            errCode?: ErrCode;
            userInfo?: ReturnType<typeof UmContactInfo.prototype.toObject>;
        }): UmContactGetInfoRes {
            const message = new UmContactGetInfoRes({});
            if (data.errCode != null) {
                message.errCode = data.errCode;
            }
            if (data.userInfo != null) {
                message.userInfo = UmContactInfo.fromObject(data.userInfo);
            }
            return message;
        }
        toObject() {
            const data: {
                errCode?: ErrCode;
                userInfo?: ReturnType<typeof UmContactInfo.prototype.toObject>;
            } = {};
            if (this.errCode != null) {
                data.errCode = this.errCode;
            }
            if (this.userInfo != null) {
                data.userInfo = this.userInfo.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.errCode != ErrCode.emErrCode_Ok)
                writer.writeEnum(1, this.errCode);
            if (this.has_userInfo)
                writer.writeMessage(2, this.userInfo, () => this.userInfo.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UmContactGetInfoRes {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UmContactGetInfoRes();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.errCode = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.userInfo, () => message.userInfo = UmContactInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UmContactGetInfoRes {
            return UmContactGetInfoRes.deserialize(bytes);
        }
    }
    export class UmContactFindReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sessId?: string;
            username?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sessId" in data && data.sessId != undefined) {
                    this.sessId = data.sessId;
                }
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
            }
        }
        get sessId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sessId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            sessId?: string;
            username?: string;
        }): UmContactFindReq {
            const message = new UmContactFindReq({});
            if (data.sessId != null) {
                message.sessId = data.sessId;
            }
            if (data.username != null) {
                message.username = data.username;
            }
            return message;
        }
        toObject() {
            const data: {
                sessId?: string;
                username?: string;
            } = {};
            if (this.sessId != null) {
                data.sessId = this.sessId;
            }
            if (this.username != null) {
                data.username = this.username;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sessId.length)
                writer.writeString(1, this.sessId);
            if (this.username.length)
                writer.writeString(2, this.username);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UmContactFindReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UmContactFindReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sessId = reader.readString();
                        break;
                    case 2:
                        message.username = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UmContactFindReq {
            return UmContactFindReq.deserialize(bytes);
        }
    }
    export class UmContactFindRes extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            errCode?: ErrCode;
            userInfo?: UmContactInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("errCode" in data && data.errCode != undefined) {
                    this.errCode = data.errCode;
                }
                if ("userInfo" in data && data.userInfo != undefined) {
                    this.userInfo = data.userInfo;
                }
            }
        }
        get errCode() {
            return pb_1.Message.getFieldWithDefault(this, 1, ErrCode.emErrCode_Ok) as ErrCode;
        }
        set errCode(value: ErrCode) {
            pb_1.Message.setField(this, 1, value);
        }
        get userInfo() {
            return pb_1.Message.getWrapperField(this, UmContactInfo, 2) as UmContactInfo;
        }
        set userInfo(value: UmContactInfo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_userInfo() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            errCode?: ErrCode;
            userInfo?: ReturnType<typeof UmContactInfo.prototype.toObject>;
        }): UmContactFindRes {
            const message = new UmContactFindRes({});
            if (data.errCode != null) {
                message.errCode = data.errCode;
            }
            if (data.userInfo != null) {
                message.userInfo = UmContactInfo.fromObject(data.userInfo);
            }
            return message;
        }
        toObject() {
            const data: {
                errCode?: ErrCode;
                userInfo?: ReturnType<typeof UmContactInfo.prototype.toObject>;
            } = {};
            if (this.errCode != null) {
                data.errCode = this.errCode;
            }
            if (this.userInfo != null) {
                data.userInfo = this.userInfo.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.errCode != ErrCode.emErrCode_Ok)
                writer.writeEnum(1, this.errCode);
            if (this.has_userInfo)
                writer.writeMessage(2, this.userInfo, () => this.userInfo.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UmContactFindRes {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UmContactFindRes();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.errCode = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.userInfo, () => message.userInfo = UmContactInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UmContactFindRes {
            return UmContactFindRes.deserialize(bytes);
        }
    }
    export class UmContactAddRequestReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sessId?: string;
            contactUid?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sessId" in data && data.sessId != undefined) {
                    this.sessId = data.sessId;
                }
                if ("contactUid" in data && data.contactUid != undefined) {
                    this.contactUid = data.contactUid;
                }
            }
        }
        get sessId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sessId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get contactUid() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set contactUid(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            sessId?: string;
            contactUid?: number;
        }): UmContactAddRequestReq {
            const message = new UmContactAddRequestReq({});
            if (data.sessId != null) {
                message.sessId = data.sessId;
            }
            if (data.contactUid != null) {
                message.contactUid = data.contactUid;
            }
            return message;
        }
        toObject() {
            const data: {
                sessId?: string;
                contactUid?: number;
            } = {};
            if (this.sessId != null) {
                data.sessId = this.sessId;
            }
            if (this.contactUid != null) {
                data.contactUid = this.contactUid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sessId.length)
                writer.writeString(1, this.sessId);
            if (this.contactUid != 0)
                writer.writeUint64(2, this.contactUid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UmContactAddRequestReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UmContactAddRequestReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sessId = reader.readString();
                        break;
                    case 2:
                        message.contactUid = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UmContactAddRequestReq {
            return UmContactAddRequestReq.deserialize(bytes);
        }
    }
    export class UmContactAddRequestRes extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            errCode?: ErrCode;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("errCode" in data && data.errCode != undefined) {
                    this.errCode = data.errCode;
                }
            }
        }
        get errCode() {
            return pb_1.Message.getFieldWithDefault(this, 1, ErrCode.emErrCode_Ok) as ErrCode;
        }
        set errCode(value: ErrCode) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            errCode?: ErrCode;
        }): UmContactAddRequestRes {
            const message = new UmContactAddRequestRes({});
            if (data.errCode != null) {
                message.errCode = data.errCode;
            }
            return message;
        }
        toObject() {
            const data: {
                errCode?: ErrCode;
            } = {};
            if (this.errCode != null) {
                data.errCode = this.errCode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.errCode != ErrCode.emErrCode_Ok)
                writer.writeEnum(1, this.errCode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UmContactAddRequestRes {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UmContactAddRequestRes();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.errCode = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UmContactAddRequestRes {
            return UmContactAddRequestRes.deserialize(bytes);
        }
    }
    export class UmContactAcceptReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sessId?: string;
            contactUid?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sessId" in data && data.sessId != undefined) {
                    this.sessId = data.sessId;
                }
                if ("contactUid" in data && data.contactUid != undefined) {
                    this.contactUid = data.contactUid;
                }
            }
        }
        get sessId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sessId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get contactUid() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set contactUid(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            sessId?: string;
            contactUid?: number;
        }): UmContactAcceptReq {
            const message = new UmContactAcceptReq({});
            if (data.sessId != null) {
                message.sessId = data.sessId;
            }
            if (data.contactUid != null) {
                message.contactUid = data.contactUid;
            }
            return message;
        }
        toObject() {
            const data: {
                sessId?: string;
                contactUid?: number;
            } = {};
            if (this.sessId != null) {
                data.sessId = this.sessId;
            }
            if (this.contactUid != null) {
                data.contactUid = this.contactUid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sessId.length)
                writer.writeString(1, this.sessId);
            if (this.contactUid != 0)
                writer.writeUint64(2, this.contactUid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UmContactAcceptReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UmContactAcceptReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sessId = reader.readString();
                        break;
                    case 2:
                        message.contactUid = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UmContactAcceptReq {
            return UmContactAcceptReq.deserialize(bytes);
        }
    }
    export class UmContactAcceptRes extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            errCode?: ErrCode;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("errCode" in data && data.errCode != undefined) {
                    this.errCode = data.errCode;
                }
            }
        }
        get errCode() {
            return pb_1.Message.getFieldWithDefault(this, 1, ErrCode.emErrCode_Ok) as ErrCode;
        }
        set errCode(value: ErrCode) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            errCode?: ErrCode;
        }): UmContactAcceptRes {
            const message = new UmContactAcceptRes({});
            if (data.errCode != null) {
                message.errCode = data.errCode;
            }
            return message;
        }
        toObject() {
            const data: {
                errCode?: ErrCode;
            } = {};
            if (this.errCode != null) {
                data.errCode = this.errCode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.errCode != ErrCode.emErrCode_Ok)
                writer.writeEnum(1, this.errCode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UmContactAcceptRes {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UmContactAcceptRes();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.errCode = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UmContactAcceptRes {
            return UmContactAcceptRes.deserialize(bytes);
        }
    }
    export class UmContactRejectReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sessId?: string;
            contactUid?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sessId" in data && data.sessId != undefined) {
                    this.sessId = data.sessId;
                }
                if ("contactUid" in data && data.contactUid != undefined) {
                    this.contactUid = data.contactUid;
                }
            }
        }
        get sessId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sessId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get contactUid() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set contactUid(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            sessId?: string;
            contactUid?: number;
        }): UmContactRejectReq {
            const message = new UmContactRejectReq({});
            if (data.sessId != null) {
                message.sessId = data.sessId;
            }
            if (data.contactUid != null) {
                message.contactUid = data.contactUid;
            }
            return message;
        }
        toObject() {
            const data: {
                sessId?: string;
                contactUid?: number;
            } = {};
            if (this.sessId != null) {
                data.sessId = this.sessId;
            }
            if (this.contactUid != null) {
                data.contactUid = this.contactUid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sessId.length)
                writer.writeString(1, this.sessId);
            if (this.contactUid != 0)
                writer.writeUint64(2, this.contactUid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UmContactRejectReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UmContactRejectReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sessId = reader.readString();
                        break;
                    case 2:
                        message.contactUid = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UmContactRejectReq {
            return UmContactRejectReq.deserialize(bytes);
        }
    }
    export class UmContactRejectRes extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            errCode?: ErrCode;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("errCode" in data && data.errCode != undefined) {
                    this.errCode = data.errCode;
                }
            }
        }
        get errCode() {
            return pb_1.Message.getFieldWithDefault(this, 1, ErrCode.emErrCode_Ok) as ErrCode;
        }
        set errCode(value: ErrCode) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            errCode?: ErrCode;
        }): UmContactRejectRes {
            const message = new UmContactRejectRes({});
            if (data.errCode != null) {
                message.errCode = data.errCode;
            }
            return message;
        }
        toObject() {
            const data: {
                errCode?: ErrCode;
            } = {};
            if (this.errCode != null) {
                data.errCode = this.errCode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.errCode != ErrCode.emErrCode_Ok)
                writer.writeEnum(1, this.errCode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UmContactRejectRes {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UmContactRejectRes();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.errCode = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UmContactRejectRes {
            return UmContactRejectRes.deserialize(bytes);
        }
    }
    export class UmContactDelReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sessId?: string;
            contactUid?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sessId" in data && data.sessId != undefined) {
                    this.sessId = data.sessId;
                }
                if ("contactUid" in data && data.contactUid != undefined) {
                    this.contactUid = data.contactUid;
                }
            }
        }
        get sessId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sessId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get contactUid() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set contactUid(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            sessId?: string;
            contactUid?: number;
        }): UmContactDelReq {
            const message = new UmContactDelReq({});
            if (data.sessId != null) {
                message.sessId = data.sessId;
            }
            if (data.contactUid != null) {
                message.contactUid = data.contactUid;
            }
            return message;
        }
        toObject() {
            const data: {
                sessId?: string;
                contactUid?: number;
            } = {};
            if (this.sessId != null) {
                data.sessId = this.sessId;
            }
            if (this.contactUid != null) {
                data.contactUid = this.contactUid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sessId.length)
                writer.writeString(1, this.sessId);
            if (this.contactUid != 0)
                writer.writeUint64(2, this.contactUid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UmContactDelReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UmContactDelReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sessId = reader.readString();
                        break;
                    case 2:
                        message.contactUid = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UmContactDelReq {
            return UmContactDelReq.deserialize(bytes);
        }
    }
    export class UmContactDelRes extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            errCode?: ErrCode;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("errCode" in data && data.errCode != undefined) {
                    this.errCode = data.errCode;
                }
            }
        }
        get errCode() {
            return pb_1.Message.getFieldWithDefault(this, 1, ErrCode.emErrCode_Ok) as ErrCode;
        }
        set errCode(value: ErrCode) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            errCode?: ErrCode;
        }): UmContactDelRes {
            const message = new UmContactDelRes({});
            if (data.errCode != null) {
                message.errCode = data.errCode;
            }
            return message;
        }
        toObject() {
            const data: {
                errCode?: ErrCode;
            } = {};
            if (this.errCode != null) {
                data.errCode = this.errCode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.errCode != ErrCode.emErrCode_Ok)
                writer.writeEnum(1, this.errCode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UmContactDelRes {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UmContactDelRes();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.errCode = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UmContactDelRes {
            return UmContactDelRes.deserialize(bytes);
        }
    }
    export class UmGroupInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            groupId?: number;
            groupName?: string;
            ownerUid?: number;
            avatar?: string;
            memCount?: number;
            createTsMs?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("groupId" in data && data.groupId != undefined) {
                    this.groupId = data.groupId;
                }
                if ("groupName" in data && data.groupName != undefined) {
                    this.groupName = data.groupName;
                }
                if ("ownerUid" in data && data.ownerUid != undefined) {
                    this.ownerUid = data.ownerUid;
                }
                if ("avatar" in data && data.avatar != undefined) {
                    this.avatar = data.avatar;
                }
                if ("memCount" in data && data.memCount != undefined) {
                    this.memCount = data.memCount;
                }
                if ("createTsMs" in data && data.createTsMs != undefined) {
                    this.createTsMs = data.createTsMs;
                }
            }
        }
        get groupId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set groupId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get groupName() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set groupName(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get ownerUid() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set ownerUid(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get avatar() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set avatar(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get memCount() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set memCount(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get createTsMs() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set createTsMs(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            groupId?: number;
            groupName?: string;
            ownerUid?: number;
            avatar?: string;
            memCount?: number;
            createTsMs?: number;
        }): UmGroupInfo {
            const message = new UmGroupInfo({});
            if (data.groupId != null) {
                message.groupId = data.groupId;
            }
            if (data.groupName != null) {
                message.groupName = data.groupName;
            }
            if (data.ownerUid != null) {
                message.ownerUid = data.ownerUid;
            }
            if (data.avatar != null) {
                message.avatar = data.avatar;
            }
            if (data.memCount != null) {
                message.memCount = data.memCount;
            }
            if (data.createTsMs != null) {
                message.createTsMs = data.createTsMs;
            }
            return message;
        }
        toObject() {
            const data: {
                groupId?: number;
                groupName?: string;
                ownerUid?: number;
                avatar?: string;
                memCount?: number;
                createTsMs?: number;
            } = {};
            if (this.groupId != null) {
                data.groupId = this.groupId;
            }
            if (this.groupName != null) {
                data.groupName = this.groupName;
            }
            if (this.ownerUid != null) {
                data.ownerUid = this.ownerUid;
            }
            if (this.avatar != null) {
                data.avatar = this.avatar;
            }
            if (this.memCount != null) {
                data.memCount = this.memCount;
            }
            if (this.createTsMs != null) {
                data.createTsMs = this.createTsMs;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.groupId != 0)
                writer.writeUint64(1, this.groupId);
            if (this.groupName.length)
                writer.writeString(2, this.groupName);
            if (this.ownerUid != 0)
                writer.writeUint64(3, this.ownerUid);
            if (this.avatar.length)
                writer.writeString(4, this.avatar);
            if (this.memCount != 0)
                writer.writeUint64(5, this.memCount);
            if (this.createTsMs != 0)
                writer.writeUint64(6, this.createTsMs);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UmGroupInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UmGroupInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.groupId = reader.readUint64();
                        break;
                    case 2:
                        message.groupName = reader.readString();
                        break;
                    case 3:
                        message.ownerUid = reader.readUint64();
                        break;
                    case 4:
                        message.avatar = reader.readString();
                        break;
                    case 5:
                        message.memCount = reader.readUint64();
                        break;
                    case 6:
                        message.createTsMs = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UmGroupInfo {
            return UmGroupInfo.deserialize(bytes);
        }
    }
    export class UmGroupGetListReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sessId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sessId" in data && data.sessId != undefined) {
                    this.sessId = data.sessId;
                }
            }
        }
        get sessId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sessId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            sessId?: string;
        }): UmGroupGetListReq {
            const message = new UmGroupGetListReq({});
            if (data.sessId != null) {
                message.sessId = data.sessId;
            }
            return message;
        }
        toObject() {
            const data: {
                sessId?: string;
            } = {};
            if (this.sessId != null) {
                data.sessId = this.sessId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sessId.length)
                writer.writeString(1, this.sessId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UmGroupGetListReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UmGroupGetListReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sessId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UmGroupGetListReq {
            return UmGroupGetListReq.deserialize(bytes);
        }
    }
    export class UmGroupGetListRes extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            errCode?: ErrCode;
            groupList?: UmGroupInfo[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("errCode" in data && data.errCode != undefined) {
                    this.errCode = data.errCode;
                }
                if ("groupList" in data && data.groupList != undefined) {
                    this.groupList = data.groupList;
                }
            }
        }
        get errCode() {
            return pb_1.Message.getFieldWithDefault(this, 1, ErrCode.emErrCode_Ok) as ErrCode;
        }
        set errCode(value: ErrCode) {
            pb_1.Message.setField(this, 1, value);
        }
        get groupList() {
            return pb_1.Message.getRepeatedWrapperField(this, UmGroupInfo, 2) as UmGroupInfo[];
        }
        set groupList(value: UmGroupInfo[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            errCode?: ErrCode;
            groupList?: ReturnType<typeof UmGroupInfo.prototype.toObject>[];
        }): UmGroupGetListRes {
            const message = new UmGroupGetListRes({});
            if (data.errCode != null) {
                message.errCode = data.errCode;
            }
            if (data.groupList != null) {
                message.groupList = data.groupList.map(item => UmGroupInfo.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                errCode?: ErrCode;
                groupList?: ReturnType<typeof UmGroupInfo.prototype.toObject>[];
            } = {};
            if (this.errCode != null) {
                data.errCode = this.errCode;
            }
            if (this.groupList != null) {
                data.groupList = this.groupList.map((item: UmGroupInfo) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.errCode != ErrCode.emErrCode_Ok)
                writer.writeEnum(1, this.errCode);
            if (this.groupList.length)
                writer.writeRepeatedMessage(2, this.groupList, (item: UmGroupInfo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UmGroupGetListRes {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UmGroupGetListRes();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.errCode = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.groupList, () => pb_1.Message.addToRepeatedWrapperField(message, 2, UmGroupInfo.deserialize(reader), UmGroupInfo));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UmGroupGetListRes {
            return UmGroupGetListRes.deserialize(bytes);
        }
    }
    export class UmGroupGetInfoReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sessId?: string;
            groupId?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sessId" in data && data.sessId != undefined) {
                    this.sessId = data.sessId;
                }
                if ("groupId" in data && data.groupId != undefined) {
                    this.groupId = data.groupId;
                }
            }
        }
        get sessId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sessId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get groupId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set groupId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            sessId?: string;
            groupId?: number;
        }): UmGroupGetInfoReq {
            const message = new UmGroupGetInfoReq({});
            if (data.sessId != null) {
                message.sessId = data.sessId;
            }
            if (data.groupId != null) {
                message.groupId = data.groupId;
            }
            return message;
        }
        toObject() {
            const data: {
                sessId?: string;
                groupId?: number;
            } = {};
            if (this.sessId != null) {
                data.sessId = this.sessId;
            }
            if (this.groupId != null) {
                data.groupId = this.groupId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sessId.length)
                writer.writeString(1, this.sessId);
            if (this.groupId != 0)
                writer.writeUint64(2, this.groupId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UmGroupGetInfoReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UmGroupGetInfoReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sessId = reader.readString();
                        break;
                    case 2:
                        message.groupId = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UmGroupGetInfoReq {
            return UmGroupGetInfoReq.deserialize(bytes);
        }
    }
    export class UmGroupGetInfoRes extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            errCode?: ErrCode;
            groupInfo?: UmGroupInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("errCode" in data && data.errCode != undefined) {
                    this.errCode = data.errCode;
                }
                if ("groupInfo" in data && data.groupInfo != undefined) {
                    this.groupInfo = data.groupInfo;
                }
            }
        }
        get errCode() {
            return pb_1.Message.getFieldWithDefault(this, 1, ErrCode.emErrCode_Ok) as ErrCode;
        }
        set errCode(value: ErrCode) {
            pb_1.Message.setField(this, 1, value);
        }
        get groupInfo() {
            return pb_1.Message.getWrapperField(this, UmGroupInfo, 2) as UmGroupInfo;
        }
        set groupInfo(value: UmGroupInfo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_groupInfo() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            errCode?: ErrCode;
            groupInfo?: ReturnType<typeof UmGroupInfo.prototype.toObject>;
        }): UmGroupGetInfoRes {
            const message = new UmGroupGetInfoRes({});
            if (data.errCode != null) {
                message.errCode = data.errCode;
            }
            if (data.groupInfo != null) {
                message.groupInfo = UmGroupInfo.fromObject(data.groupInfo);
            }
            return message;
        }
        toObject() {
            const data: {
                errCode?: ErrCode;
                groupInfo?: ReturnType<typeof UmGroupInfo.prototype.toObject>;
            } = {};
            if (this.errCode != null) {
                data.errCode = this.errCode;
            }
            if (this.groupInfo != null) {
                data.groupInfo = this.groupInfo.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.errCode != ErrCode.emErrCode_Ok)
                writer.writeEnum(1, this.errCode);
            if (this.has_groupInfo)
                writer.writeMessage(2, this.groupInfo, () => this.groupInfo.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UmGroupGetInfoRes {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UmGroupGetInfoRes();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.errCode = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.groupInfo, () => message.groupInfo = UmGroupInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UmGroupGetInfoRes {
            return UmGroupGetInfoRes.deserialize(bytes);
        }
    }
    export class UmGroupUpdateInfoReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sessId?: string;
            groupId?: number;
            groupName?: string;
            avatar?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sessId" in data && data.sessId != undefined) {
                    this.sessId = data.sessId;
                }
                if ("groupId" in data && data.groupId != undefined) {
                    this.groupId = data.groupId;
                }
                if ("groupName" in data && data.groupName != undefined) {
                    this.groupName = data.groupName;
                }
                if ("avatar" in data && data.avatar != undefined) {
                    this.avatar = data.avatar;
                }
            }
        }
        get sessId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sessId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get groupId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set groupId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get groupName() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set groupName(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get avatar() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set avatar(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            sessId?: string;
            groupId?: number;
            groupName?: string;
            avatar?: string;
        }): UmGroupUpdateInfoReq {
            const message = new UmGroupUpdateInfoReq({});
            if (data.sessId != null) {
                message.sessId = data.sessId;
            }
            if (data.groupId != null) {
                message.groupId = data.groupId;
            }
            if (data.groupName != null) {
                message.groupName = data.groupName;
            }
            if (data.avatar != null) {
                message.avatar = data.avatar;
            }
            return message;
        }
        toObject() {
            const data: {
                sessId?: string;
                groupId?: number;
                groupName?: string;
                avatar?: string;
            } = {};
            if (this.sessId != null) {
                data.sessId = this.sessId;
            }
            if (this.groupId != null) {
                data.groupId = this.groupId;
            }
            if (this.groupName != null) {
                data.groupName = this.groupName;
            }
            if (this.avatar != null) {
                data.avatar = this.avatar;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sessId.length)
                writer.writeString(1, this.sessId);
            if (this.groupId != 0)
                writer.writeUint64(2, this.groupId);
            if (this.groupName.length)
                writer.writeString(3, this.groupName);
            if (this.avatar.length)
                writer.writeString(4, this.avatar);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UmGroupUpdateInfoReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UmGroupUpdateInfoReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sessId = reader.readString();
                        break;
                    case 2:
                        message.groupId = reader.readUint64();
                        break;
                    case 3:
                        message.groupName = reader.readString();
                        break;
                    case 4:
                        message.avatar = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UmGroupUpdateInfoReq {
            return UmGroupUpdateInfoReq.deserialize(bytes);
        }
    }
    export class UmGroupUpdateInfoRes extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            errCode?: ErrCode;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("errCode" in data && data.errCode != undefined) {
                    this.errCode = data.errCode;
                }
            }
        }
        get errCode() {
            return pb_1.Message.getFieldWithDefault(this, 1, ErrCode.emErrCode_Ok) as ErrCode;
        }
        set errCode(value: ErrCode) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            errCode?: ErrCode;
        }): UmGroupUpdateInfoRes {
            const message = new UmGroupUpdateInfoRes({});
            if (data.errCode != null) {
                message.errCode = data.errCode;
            }
            return message;
        }
        toObject() {
            const data: {
                errCode?: ErrCode;
            } = {};
            if (this.errCode != null) {
                data.errCode = this.errCode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.errCode != ErrCode.emErrCode_Ok)
                writer.writeEnum(1, this.errCode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UmGroupUpdateInfoRes {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UmGroupUpdateInfoRes();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.errCode = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UmGroupUpdateInfoRes {
            return UmGroupUpdateInfoRes.deserialize(bytes);
        }
    }
    export class UmGroupFindReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sessId?: string;
            groupId?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sessId" in data && data.sessId != undefined) {
                    this.sessId = data.sessId;
                }
                if ("groupId" in data && data.groupId != undefined) {
                    this.groupId = data.groupId;
                }
            }
        }
        get sessId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sessId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get groupId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set groupId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            sessId?: string;
            groupId?: number;
        }): UmGroupFindReq {
            const message = new UmGroupFindReq({});
            if (data.sessId != null) {
                message.sessId = data.sessId;
            }
            if (data.groupId != null) {
                message.groupId = data.groupId;
            }
            return message;
        }
        toObject() {
            const data: {
                sessId?: string;
                groupId?: number;
            } = {};
            if (this.sessId != null) {
                data.sessId = this.sessId;
            }
            if (this.groupId != null) {
                data.groupId = this.groupId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sessId.length)
                writer.writeString(1, this.sessId);
            if (this.groupId != 0)
                writer.writeUint64(2, this.groupId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UmGroupFindReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UmGroupFindReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sessId = reader.readString();
                        break;
                    case 2:
                        message.groupId = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UmGroupFindReq {
            return UmGroupFindReq.deserialize(bytes);
        }
    }
    export class UmGroupFindRes extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            errCode?: ErrCode;
            groupInfo?: UmGroupInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("errCode" in data && data.errCode != undefined) {
                    this.errCode = data.errCode;
                }
                if ("groupInfo" in data && data.groupInfo != undefined) {
                    this.groupInfo = data.groupInfo;
                }
            }
        }
        get errCode() {
            return pb_1.Message.getFieldWithDefault(this, 1, ErrCode.emErrCode_Ok) as ErrCode;
        }
        set errCode(value: ErrCode) {
            pb_1.Message.setField(this, 1, value);
        }
        get groupInfo() {
            return pb_1.Message.getWrapperField(this, UmGroupInfo, 2) as UmGroupInfo;
        }
        set groupInfo(value: UmGroupInfo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_groupInfo() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            errCode?: ErrCode;
            groupInfo?: ReturnType<typeof UmGroupInfo.prototype.toObject>;
        }): UmGroupFindRes {
            const message = new UmGroupFindRes({});
            if (data.errCode != null) {
                message.errCode = data.errCode;
            }
            if (data.groupInfo != null) {
                message.groupInfo = UmGroupInfo.fromObject(data.groupInfo);
            }
            return message;
        }
        toObject() {
            const data: {
                errCode?: ErrCode;
                groupInfo?: ReturnType<typeof UmGroupInfo.prototype.toObject>;
            } = {};
            if (this.errCode != null) {
                data.errCode = this.errCode;
            }
            if (this.groupInfo != null) {
                data.groupInfo = this.groupInfo.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.errCode != ErrCode.emErrCode_Ok)
                writer.writeEnum(1, this.errCode);
            if (this.has_groupInfo)
                writer.writeMessage(2, this.groupInfo, () => this.groupInfo.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UmGroupFindRes {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UmGroupFindRes();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.errCode = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.groupInfo, () => message.groupInfo = UmGroupInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UmGroupFindRes {
            return UmGroupFindRes.deserialize(bytes);
        }
    }
    export class UmGroupCreateReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sessId?: string;
            groupName?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sessId" in data && data.sessId != undefined) {
                    this.sessId = data.sessId;
                }
                if ("groupName" in data && data.groupName != undefined) {
                    this.groupName = data.groupName;
                }
            }
        }
        get sessId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sessId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get groupName() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set groupName(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            sessId?: string;
            groupName?: string;
        }): UmGroupCreateReq {
            const message = new UmGroupCreateReq({});
            if (data.sessId != null) {
                message.sessId = data.sessId;
            }
            if (data.groupName != null) {
                message.groupName = data.groupName;
            }
            return message;
        }
        toObject() {
            const data: {
                sessId?: string;
                groupName?: string;
            } = {};
            if (this.sessId != null) {
                data.sessId = this.sessId;
            }
            if (this.groupName != null) {
                data.groupName = this.groupName;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sessId.length)
                writer.writeString(1, this.sessId);
            if (this.groupName.length)
                writer.writeString(2, this.groupName);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UmGroupCreateReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UmGroupCreateReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sessId = reader.readString();
                        break;
                    case 2:
                        message.groupName = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UmGroupCreateReq {
            return UmGroupCreateReq.deserialize(bytes);
        }
    }
    export class UmGroupCreateRes extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            errCode?: ErrCode;
            groupId?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("errCode" in data && data.errCode != undefined) {
                    this.errCode = data.errCode;
                }
                if ("groupId" in data && data.groupId != undefined) {
                    this.groupId = data.groupId;
                }
            }
        }
        get errCode() {
            return pb_1.Message.getFieldWithDefault(this, 1, ErrCode.emErrCode_Ok) as ErrCode;
        }
        set errCode(value: ErrCode) {
            pb_1.Message.setField(this, 1, value);
        }
        get groupId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set groupId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            errCode?: ErrCode;
            groupId?: number;
        }): UmGroupCreateRes {
            const message = new UmGroupCreateRes({});
            if (data.errCode != null) {
                message.errCode = data.errCode;
            }
            if (data.groupId != null) {
                message.groupId = data.groupId;
            }
            return message;
        }
        toObject() {
            const data: {
                errCode?: ErrCode;
                groupId?: number;
            } = {};
            if (this.errCode != null) {
                data.errCode = this.errCode;
            }
            if (this.groupId != null) {
                data.groupId = this.groupId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.errCode != ErrCode.emErrCode_Ok)
                writer.writeEnum(1, this.errCode);
            if (this.groupId != 0)
                writer.writeUint64(2, this.groupId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UmGroupCreateRes {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UmGroupCreateRes();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.errCode = reader.readEnum();
                        break;
                    case 2:
                        message.groupId = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UmGroupCreateRes {
            return UmGroupCreateRes.deserialize(bytes);
        }
    }
    export class UmGroupDeleteReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sessId?: string;
            groupId?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sessId" in data && data.sessId != undefined) {
                    this.sessId = data.sessId;
                }
                if ("groupId" in data && data.groupId != undefined) {
                    this.groupId = data.groupId;
                }
            }
        }
        get sessId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sessId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get groupId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set groupId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            sessId?: string;
            groupId?: number;
        }): UmGroupDeleteReq {
            const message = new UmGroupDeleteReq({});
            if (data.sessId != null) {
                message.sessId = data.sessId;
            }
            if (data.groupId != null) {
                message.groupId = data.groupId;
            }
            return message;
        }
        toObject() {
            const data: {
                sessId?: string;
                groupId?: number;
            } = {};
            if (this.sessId != null) {
                data.sessId = this.sessId;
            }
            if (this.groupId != null) {
                data.groupId = this.groupId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sessId.length)
                writer.writeString(1, this.sessId);
            if (this.groupId != 0)
                writer.writeUint64(2, this.groupId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UmGroupDeleteReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UmGroupDeleteReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sessId = reader.readString();
                        break;
                    case 2:
                        message.groupId = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UmGroupDeleteReq {
            return UmGroupDeleteReq.deserialize(bytes);
        }
    }
    export class UmGroupDeleteRes extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            errCode?: ErrCode;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("errCode" in data && data.errCode != undefined) {
                    this.errCode = data.errCode;
                }
            }
        }
        get errCode() {
            return pb_1.Message.getFieldWithDefault(this, 1, ErrCode.emErrCode_Ok) as ErrCode;
        }
        set errCode(value: ErrCode) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            errCode?: ErrCode;
        }): UmGroupDeleteRes {
            const message = new UmGroupDeleteRes({});
            if (data.errCode != null) {
                message.errCode = data.errCode;
            }
            return message;
        }
        toObject() {
            const data: {
                errCode?: ErrCode;
            } = {};
            if (this.errCode != null) {
                data.errCode = this.errCode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.errCode != ErrCode.emErrCode_Ok)
                writer.writeEnum(1, this.errCode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UmGroupDeleteRes {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UmGroupDeleteRes();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.errCode = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UmGroupDeleteRes {
            return UmGroupDeleteRes.deserialize(bytes);
        }
    }
    export class UmGroupGetMemListReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sessId?: string;
            groupId?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sessId" in data && data.sessId != undefined) {
                    this.sessId = data.sessId;
                }
                if ("groupId" in data && data.groupId != undefined) {
                    this.groupId = data.groupId;
                }
            }
        }
        get sessId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sessId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get groupId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set groupId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            sessId?: string;
            groupId?: number;
        }): UmGroupGetMemListReq {
            const message = new UmGroupGetMemListReq({});
            if (data.sessId != null) {
                message.sessId = data.sessId;
            }
            if (data.groupId != null) {
                message.groupId = data.groupId;
            }
            return message;
        }
        toObject() {
            const data: {
                sessId?: string;
                groupId?: number;
            } = {};
            if (this.sessId != null) {
                data.sessId = this.sessId;
            }
            if (this.groupId != null) {
                data.groupId = this.groupId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sessId.length)
                writer.writeString(1, this.sessId);
            if (this.groupId != 0)
                writer.writeUint64(2, this.groupId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UmGroupGetMemListReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UmGroupGetMemListReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sessId = reader.readString();
                        break;
                    case 2:
                        message.groupId = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UmGroupGetMemListReq {
            return UmGroupGetMemListReq.deserialize(bytes);
        }
    }
    export class UmGroupGetMemListRes extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            errCode?: ErrCode;
            memUidList?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("errCode" in data && data.errCode != undefined) {
                    this.errCode = data.errCode;
                }
                if ("memUidList" in data && data.memUidList != undefined) {
                    this.memUidList = data.memUidList;
                }
            }
        }
        get errCode() {
            return pb_1.Message.getFieldWithDefault(this, 1, ErrCode.emErrCode_Ok) as ErrCode;
        }
        set errCode(value: ErrCode) {
            pb_1.Message.setField(this, 1, value);
        }
        get memUidList() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
        }
        set memUidList(value: number[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            errCode?: ErrCode;
            memUidList?: number[];
        }): UmGroupGetMemListRes {
            const message = new UmGroupGetMemListRes({});
            if (data.errCode != null) {
                message.errCode = data.errCode;
            }
            if (data.memUidList != null) {
                message.memUidList = data.memUidList;
            }
            return message;
        }
        toObject() {
            const data: {
                errCode?: ErrCode;
                memUidList?: number[];
            } = {};
            if (this.errCode != null) {
                data.errCode = this.errCode;
            }
            if (this.memUidList != null) {
                data.memUidList = this.memUidList;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.errCode != ErrCode.emErrCode_Ok)
                writer.writeEnum(1, this.errCode);
            if (this.memUidList.length)
                writer.writePackedUint64(2, this.memUidList);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UmGroupGetMemListRes {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UmGroupGetMemListRes();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.errCode = reader.readEnum();
                        break;
                    case 2:
                        message.memUidList = reader.readPackedUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UmGroupGetMemListRes {
            return UmGroupGetMemListRes.deserialize(bytes);
        }
    }
    export class UmGroupJoinRequestReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sessId?: string;
            groupId?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sessId" in data && data.sessId != undefined) {
                    this.sessId = data.sessId;
                }
                if ("groupId" in data && data.groupId != undefined) {
                    this.groupId = data.groupId;
                }
            }
        }
        get sessId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sessId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get groupId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set groupId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            sessId?: string;
            groupId?: number;
        }): UmGroupJoinRequestReq {
            const message = new UmGroupJoinRequestReq({});
            if (data.sessId != null) {
                message.sessId = data.sessId;
            }
            if (data.groupId != null) {
                message.groupId = data.groupId;
            }
            return message;
        }
        toObject() {
            const data: {
                sessId?: string;
                groupId?: number;
            } = {};
            if (this.sessId != null) {
                data.sessId = this.sessId;
            }
            if (this.groupId != null) {
                data.groupId = this.groupId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sessId.length)
                writer.writeString(1, this.sessId);
            if (this.groupId != 0)
                writer.writeUint64(2, this.groupId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UmGroupJoinRequestReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UmGroupJoinRequestReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sessId = reader.readString();
                        break;
                    case 2:
                        message.groupId = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UmGroupJoinRequestReq {
            return UmGroupJoinRequestReq.deserialize(bytes);
        }
    }
    export class UmGroupJoinRequestRes extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            errCode?: ErrCode;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("errCode" in data && data.errCode != undefined) {
                    this.errCode = data.errCode;
                }
            }
        }
        get errCode() {
            return pb_1.Message.getFieldWithDefault(this, 1, ErrCode.emErrCode_Ok) as ErrCode;
        }
        set errCode(value: ErrCode) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            errCode?: ErrCode;
        }): UmGroupJoinRequestRes {
            const message = new UmGroupJoinRequestRes({});
            if (data.errCode != null) {
                message.errCode = data.errCode;
            }
            return message;
        }
        toObject() {
            const data: {
                errCode?: ErrCode;
            } = {};
            if (this.errCode != null) {
                data.errCode = this.errCode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.errCode != ErrCode.emErrCode_Ok)
                writer.writeEnum(1, this.errCode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UmGroupJoinRequestRes {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UmGroupJoinRequestRes();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.errCode = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UmGroupJoinRequestRes {
            return UmGroupJoinRequestRes.deserialize(bytes);
        }
    }
    export class UmGroupAcceptReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sessId?: string;
            groupId?: number;
            uid?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sessId" in data && data.sessId != undefined) {
                    this.sessId = data.sessId;
                }
                if ("groupId" in data && data.groupId != undefined) {
                    this.groupId = data.groupId;
                }
                if ("uid" in data && data.uid != undefined) {
                    this.uid = data.uid;
                }
            }
        }
        get sessId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sessId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get groupId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set groupId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get uid() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set uid(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            sessId?: string;
            groupId?: number;
            uid?: number;
        }): UmGroupAcceptReq {
            const message = new UmGroupAcceptReq({});
            if (data.sessId != null) {
                message.sessId = data.sessId;
            }
            if (data.groupId != null) {
                message.groupId = data.groupId;
            }
            if (data.uid != null) {
                message.uid = data.uid;
            }
            return message;
        }
        toObject() {
            const data: {
                sessId?: string;
                groupId?: number;
                uid?: number;
            } = {};
            if (this.sessId != null) {
                data.sessId = this.sessId;
            }
            if (this.groupId != null) {
                data.groupId = this.groupId;
            }
            if (this.uid != null) {
                data.uid = this.uid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sessId.length)
                writer.writeString(1, this.sessId);
            if (this.groupId != 0)
                writer.writeUint64(2, this.groupId);
            if (this.uid != 0)
                writer.writeUint64(3, this.uid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UmGroupAcceptReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UmGroupAcceptReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sessId = reader.readString();
                        break;
                    case 2:
                        message.groupId = reader.readUint64();
                        break;
                    case 3:
                        message.uid = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UmGroupAcceptReq {
            return UmGroupAcceptReq.deserialize(bytes);
        }
    }
    export class UmGroupAcceptRes extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            errCode?: ErrCode;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("errCode" in data && data.errCode != undefined) {
                    this.errCode = data.errCode;
                }
            }
        }
        get errCode() {
            return pb_1.Message.getFieldWithDefault(this, 1, ErrCode.emErrCode_Ok) as ErrCode;
        }
        set errCode(value: ErrCode) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            errCode?: ErrCode;
        }): UmGroupAcceptRes {
            const message = new UmGroupAcceptRes({});
            if (data.errCode != null) {
                message.errCode = data.errCode;
            }
            return message;
        }
        toObject() {
            const data: {
                errCode?: ErrCode;
            } = {};
            if (this.errCode != null) {
                data.errCode = this.errCode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.errCode != ErrCode.emErrCode_Ok)
                writer.writeEnum(1, this.errCode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UmGroupAcceptRes {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UmGroupAcceptRes();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.errCode = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UmGroupAcceptRes {
            return UmGroupAcceptRes.deserialize(bytes);
        }
    }
    export class UmGroupRejectReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sessId?: string;
            groupId?: number;
            uid?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sessId" in data && data.sessId != undefined) {
                    this.sessId = data.sessId;
                }
                if ("groupId" in data && data.groupId != undefined) {
                    this.groupId = data.groupId;
                }
                if ("uid" in data && data.uid != undefined) {
                    this.uid = data.uid;
                }
            }
        }
        get sessId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sessId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get groupId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set groupId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get uid() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set uid(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            sessId?: string;
            groupId?: number;
            uid?: number;
        }): UmGroupRejectReq {
            const message = new UmGroupRejectReq({});
            if (data.sessId != null) {
                message.sessId = data.sessId;
            }
            if (data.groupId != null) {
                message.groupId = data.groupId;
            }
            if (data.uid != null) {
                message.uid = data.uid;
            }
            return message;
        }
        toObject() {
            const data: {
                sessId?: string;
                groupId?: number;
                uid?: number;
            } = {};
            if (this.sessId != null) {
                data.sessId = this.sessId;
            }
            if (this.groupId != null) {
                data.groupId = this.groupId;
            }
            if (this.uid != null) {
                data.uid = this.uid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sessId.length)
                writer.writeString(1, this.sessId);
            if (this.groupId != 0)
                writer.writeUint64(2, this.groupId);
            if (this.uid != 0)
                writer.writeUint64(3, this.uid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UmGroupRejectReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UmGroupRejectReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sessId = reader.readString();
                        break;
                    case 2:
                        message.groupId = reader.readUint64();
                        break;
                    case 3:
                        message.uid = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UmGroupRejectReq {
            return UmGroupRejectReq.deserialize(bytes);
        }
    }
    export class UmGroupRejectRes extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            errCode?: ErrCode;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("errCode" in data && data.errCode != undefined) {
                    this.errCode = data.errCode;
                }
            }
        }
        get errCode() {
            return pb_1.Message.getFieldWithDefault(this, 1, ErrCode.emErrCode_Ok) as ErrCode;
        }
        set errCode(value: ErrCode) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            errCode?: ErrCode;
        }): UmGroupRejectRes {
            const message = new UmGroupRejectRes({});
            if (data.errCode != null) {
                message.errCode = data.errCode;
            }
            return message;
        }
        toObject() {
            const data: {
                errCode?: ErrCode;
            } = {};
            if (this.errCode != null) {
                data.errCode = this.errCode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.errCode != ErrCode.emErrCode_Ok)
                writer.writeEnum(1, this.errCode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UmGroupRejectRes {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UmGroupRejectRes();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.errCode = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UmGroupRejectRes {
            return UmGroupRejectRes.deserialize(bytes);
        }
    }
    export class UmGroupLeaveReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sessId?: string;
            groupId?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sessId" in data && data.sessId != undefined) {
                    this.sessId = data.sessId;
                }
                if ("groupId" in data && data.groupId != undefined) {
                    this.groupId = data.groupId;
                }
            }
        }
        get sessId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sessId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get groupId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set groupId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            sessId?: string;
            groupId?: number;
        }): UmGroupLeaveReq {
            const message = new UmGroupLeaveReq({});
            if (data.sessId != null) {
                message.sessId = data.sessId;
            }
            if (data.groupId != null) {
                message.groupId = data.groupId;
            }
            return message;
        }
        toObject() {
            const data: {
                sessId?: string;
                groupId?: number;
            } = {};
            if (this.sessId != null) {
                data.sessId = this.sessId;
            }
            if (this.groupId != null) {
                data.groupId = this.groupId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sessId.length)
                writer.writeString(1, this.sessId);
            if (this.groupId != 0)
                writer.writeUint64(2, this.groupId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UmGroupLeaveReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UmGroupLeaveReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sessId = reader.readString();
                        break;
                    case 2:
                        message.groupId = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UmGroupLeaveReq {
            return UmGroupLeaveReq.deserialize(bytes);
        }
    }
    export class UmGroupLeaveRes extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            errCode?: ErrCode;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("errCode" in data && data.errCode != undefined) {
                    this.errCode = data.errCode;
                }
            }
        }
        get errCode() {
            return pb_1.Message.getFieldWithDefault(this, 1, ErrCode.emErrCode_Ok) as ErrCode;
        }
        set errCode(value: ErrCode) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            errCode?: ErrCode;
        }): UmGroupLeaveRes {
            const message = new UmGroupLeaveRes({});
            if (data.errCode != null) {
                message.errCode = data.errCode;
            }
            return message;
        }
        toObject() {
            const data: {
                errCode?: ErrCode;
            } = {};
            if (this.errCode != null) {
                data.errCode = this.errCode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.errCode != ErrCode.emErrCode_Ok)
                writer.writeEnum(1, this.errCode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UmGroupLeaveRes {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UmGroupLeaveRes();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.errCode = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UmGroupLeaveRes {
            return UmGroupLeaveRes.deserialize(bytes);
        }
    }
    export class UmGroupAddMemReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sessId?: string;
            groupId?: number;
            uid?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sessId" in data && data.sessId != undefined) {
                    this.sessId = data.sessId;
                }
                if ("groupId" in data && data.groupId != undefined) {
                    this.groupId = data.groupId;
                }
                if ("uid" in data && data.uid != undefined) {
                    this.uid = data.uid;
                }
            }
        }
        get sessId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sessId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get groupId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set groupId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get uid() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set uid(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            sessId?: string;
            groupId?: number;
            uid?: number;
        }): UmGroupAddMemReq {
            const message = new UmGroupAddMemReq({});
            if (data.sessId != null) {
                message.sessId = data.sessId;
            }
            if (data.groupId != null) {
                message.groupId = data.groupId;
            }
            if (data.uid != null) {
                message.uid = data.uid;
            }
            return message;
        }
        toObject() {
            const data: {
                sessId?: string;
                groupId?: number;
                uid?: number;
            } = {};
            if (this.sessId != null) {
                data.sessId = this.sessId;
            }
            if (this.groupId != null) {
                data.groupId = this.groupId;
            }
            if (this.uid != null) {
                data.uid = this.uid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sessId.length)
                writer.writeString(1, this.sessId);
            if (this.groupId != 0)
                writer.writeUint64(2, this.groupId);
            if (this.uid != 0)
                writer.writeUint64(3, this.uid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UmGroupAddMemReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UmGroupAddMemReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sessId = reader.readString();
                        break;
                    case 2:
                        message.groupId = reader.readUint64();
                        break;
                    case 3:
                        message.uid = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UmGroupAddMemReq {
            return UmGroupAddMemReq.deserialize(bytes);
        }
    }
    export class UmGroupAddMemRes extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            errCode?: ErrCode;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("errCode" in data && data.errCode != undefined) {
                    this.errCode = data.errCode;
                }
            }
        }
        get errCode() {
            return pb_1.Message.getFieldWithDefault(this, 1, ErrCode.emErrCode_Ok) as ErrCode;
        }
        set errCode(value: ErrCode) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            errCode?: ErrCode;
        }): UmGroupAddMemRes {
            const message = new UmGroupAddMemRes({});
            if (data.errCode != null) {
                message.errCode = data.errCode;
            }
            return message;
        }
        toObject() {
            const data: {
                errCode?: ErrCode;
            } = {};
            if (this.errCode != null) {
                data.errCode = this.errCode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.errCode != ErrCode.emErrCode_Ok)
                writer.writeEnum(1, this.errCode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UmGroupAddMemRes {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UmGroupAddMemRes();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.errCode = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UmGroupAddMemRes {
            return UmGroupAddMemRes.deserialize(bytes);
        }
    }
    export class UmGroupDelMemReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sessId?: string;
            groupId?: number;
            uid?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sessId" in data && data.sessId != undefined) {
                    this.sessId = data.sessId;
                }
                if ("groupId" in data && data.groupId != undefined) {
                    this.groupId = data.groupId;
                }
                if ("uid" in data && data.uid != undefined) {
                    this.uid = data.uid;
                }
            }
        }
        get sessId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sessId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get groupId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set groupId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get uid() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set uid(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            sessId?: string;
            groupId?: number;
            uid?: number;
        }): UmGroupDelMemReq {
            const message = new UmGroupDelMemReq({});
            if (data.sessId != null) {
                message.sessId = data.sessId;
            }
            if (data.groupId != null) {
                message.groupId = data.groupId;
            }
            if (data.uid != null) {
                message.uid = data.uid;
            }
            return message;
        }
        toObject() {
            const data: {
                sessId?: string;
                groupId?: number;
                uid?: number;
            } = {};
            if (this.sessId != null) {
                data.sessId = this.sessId;
            }
            if (this.groupId != null) {
                data.groupId = this.groupId;
            }
            if (this.uid != null) {
                data.uid = this.uid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sessId.length)
                writer.writeString(1, this.sessId);
            if (this.groupId != 0)
                writer.writeUint64(2, this.groupId);
            if (this.uid != 0)
                writer.writeUint64(3, this.uid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UmGroupDelMemReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UmGroupDelMemReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sessId = reader.readString();
                        break;
                    case 2:
                        message.groupId = reader.readUint64();
                        break;
                    case 3:
                        message.uid = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UmGroupDelMemReq {
            return UmGroupDelMemReq.deserialize(bytes);
        }
    }
    export class UmGroupDelMemRes extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            errCode?: ErrCode;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("errCode" in data && data.errCode != undefined) {
                    this.errCode = data.errCode;
                }
            }
        }
        get errCode() {
            return pb_1.Message.getFieldWithDefault(this, 1, ErrCode.emErrCode_Ok) as ErrCode;
        }
        set errCode(value: ErrCode) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            errCode?: ErrCode;
        }): UmGroupDelMemRes {
            const message = new UmGroupDelMemRes({});
            if (data.errCode != null) {
                message.errCode = data.errCode;
            }
            return message;
        }
        toObject() {
            const data: {
                errCode?: ErrCode;
            } = {};
            if (this.errCode != null) {
                data.errCode = this.errCode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.errCode != ErrCode.emErrCode_Ok)
                writer.writeEnum(1, this.errCode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UmGroupDelMemRes {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UmGroupDelMemRes();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.errCode = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UmGroupDelMemRes {
            return UmGroupDelMemRes.deserialize(bytes);
        }
    }
    export class UmGroupUpdateMemReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sessId?: string;
            groupId?: number;
            uid?: number;
            role?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sessId" in data && data.sessId != undefined) {
                    this.sessId = data.sessId;
                }
                if ("groupId" in data && data.groupId != undefined) {
                    this.groupId = data.groupId;
                }
                if ("uid" in data && data.uid != undefined) {
                    this.uid = data.uid;
                }
                if ("role" in data && data.role != undefined) {
                    this.role = data.role;
                }
            }
        }
        get sessId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sessId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get groupId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set groupId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get uid() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set uid(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get role() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set role(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            sessId?: string;
            groupId?: number;
            uid?: number;
            role?: number;
        }): UmGroupUpdateMemReq {
            const message = new UmGroupUpdateMemReq({});
            if (data.sessId != null) {
                message.sessId = data.sessId;
            }
            if (data.groupId != null) {
                message.groupId = data.groupId;
            }
            if (data.uid != null) {
                message.uid = data.uid;
            }
            if (data.role != null) {
                message.role = data.role;
            }
            return message;
        }
        toObject() {
            const data: {
                sessId?: string;
                groupId?: number;
                uid?: number;
                role?: number;
            } = {};
            if (this.sessId != null) {
                data.sessId = this.sessId;
            }
            if (this.groupId != null) {
                data.groupId = this.groupId;
            }
            if (this.uid != null) {
                data.uid = this.uid;
            }
            if (this.role != null) {
                data.role = this.role;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sessId.length)
                writer.writeString(1, this.sessId);
            if (this.groupId != 0)
                writer.writeUint64(2, this.groupId);
            if (this.uid != 0)
                writer.writeUint64(3, this.uid);
            if (this.role != 0)
                writer.writeUint32(4, this.role);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UmGroupUpdateMemReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UmGroupUpdateMemReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sessId = reader.readString();
                        break;
                    case 2:
                        message.groupId = reader.readUint64();
                        break;
                    case 3:
                        message.uid = reader.readUint64();
                        break;
                    case 4:
                        message.role = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UmGroupUpdateMemReq {
            return UmGroupUpdateMemReq.deserialize(bytes);
        }
    }
    export class UmGroupUpdateMemRes extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            errCode?: ErrCode;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("errCode" in data && data.errCode != undefined) {
                    this.errCode = data.errCode;
                }
            }
        }
        get errCode() {
            return pb_1.Message.getFieldWithDefault(this, 1, ErrCode.emErrCode_Ok) as ErrCode;
        }
        set errCode(value: ErrCode) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            errCode?: ErrCode;
        }): UmGroupUpdateMemRes {
            const message = new UmGroupUpdateMemRes({});
            if (data.errCode != null) {
                message.errCode = data.errCode;
            }
            return message;
        }
        toObject() {
            const data: {
                errCode?: ErrCode;
            } = {};
            if (this.errCode != null) {
                data.errCode = this.errCode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.errCode != ErrCode.emErrCode_Ok)
                writer.writeEnum(1, this.errCode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UmGroupUpdateMemRes {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UmGroupUpdateMemRes();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.errCode = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UmGroupUpdateMemRes {
            return UmGroupUpdateMemRes.deserialize(bytes);
        }
    }
    export class ChatPeerId extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({} & (({
            uid?: number;
            groupId?: never;
        } | {
            uid?: never;
            groupId?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("uid" in data && data.uid != undefined) {
                    this.uid = data.uid;
                }
                if ("groupId" in data && data.groupId != undefined) {
                    this.groupId = data.groupId;
                }
            }
        }
        get uid() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set uid(value: number) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_uid() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get groupId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set groupId(value: number) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_groupId() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get PeerIdUnion() {
            const cases: {
                [index: number]: "none" | "uid" | "groupId";
            } = {
                0: "none",
                1: "uid",
                2: "groupId"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            uid?: number;
            groupId?: number;
        }): ChatPeerId {
            const message = new ChatPeerId({});
            if (data.uid != null) {
                message.uid = data.uid;
            }
            if (data.groupId != null) {
                message.groupId = data.groupId;
            }
            return message;
        }
        toObject() {
            const data: {
                uid?: number;
                groupId?: number;
            } = {};
            if (this.uid != null) {
                data.uid = this.uid;
            }
            if (this.groupId != null) {
                data.groupId = this.groupId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_uid)
                writer.writeUint64(1, this.uid);
            if (this.has_groupId)
                writer.writeUint64(2, this.groupId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatPeerId {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatPeerId();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.uid = reader.readUint64();
                        break;
                    case 2:
                        message.groupId = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChatPeerId {
            return ChatPeerId.deserialize(bytes);
        }
    }
    export class ChatMsg extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            senderUid?: number;
            sentTsMs?: number;
            msgType?: ChatMsgType;
            msgContent?: string;
            readMsgId?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("senderUid" in data && data.senderUid != undefined) {
                    this.senderUid = data.senderUid;
                }
                if ("sentTsMs" in data && data.sentTsMs != undefined) {
                    this.sentTsMs = data.sentTsMs;
                }
                if ("msgType" in data && data.msgType != undefined) {
                    this.msgType = data.msgType;
                }
                if ("msgContent" in data && data.msgContent != undefined) {
                    this.msgContent = data.msgContent;
                }
                if ("readMsgId" in data && data.readMsgId != undefined) {
                    this.readMsgId = data.readMsgId;
                }
            }
        }
        get senderUid() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set senderUid(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get sentTsMs() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set sentTsMs(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get msgType() {
            return pb_1.Message.getFieldWithDefault(this, 3, ChatMsgType.emChatMsgType_Text) as ChatMsgType;
        }
        set msgType(value: ChatMsgType) {
            pb_1.Message.setField(this, 3, value);
        }
        get msgContent() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set msgContent(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get readMsgId() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set readMsgId(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            senderUid?: number;
            sentTsMs?: number;
            msgType?: ChatMsgType;
            msgContent?: string;
            readMsgId?: number;
        }): ChatMsg {
            const message = new ChatMsg({});
            if (data.senderUid != null) {
                message.senderUid = data.senderUid;
            }
            if (data.sentTsMs != null) {
                message.sentTsMs = data.sentTsMs;
            }
            if (data.msgType != null) {
                message.msgType = data.msgType;
            }
            if (data.msgContent != null) {
                message.msgContent = data.msgContent;
            }
            if (data.readMsgId != null) {
                message.readMsgId = data.readMsgId;
            }
            return message;
        }
        toObject() {
            const data: {
                senderUid?: number;
                sentTsMs?: number;
                msgType?: ChatMsgType;
                msgContent?: string;
                readMsgId?: number;
            } = {};
            if (this.senderUid != null) {
                data.senderUid = this.senderUid;
            }
            if (this.sentTsMs != null) {
                data.sentTsMs = this.sentTsMs;
            }
            if (this.msgType != null) {
                data.msgType = this.msgType;
            }
            if (this.msgContent != null) {
                data.msgContent = this.msgContent;
            }
            if (this.readMsgId != null) {
                data.readMsgId = this.readMsgId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.senderUid != 0)
                writer.writeUint64(1, this.senderUid);
            if (this.sentTsMs != 0)
                writer.writeUint64(2, this.sentTsMs);
            if (this.msgType != ChatMsgType.emChatMsgType_Text)
                writer.writeEnum(3, this.msgType);
            if (this.msgContent.length)
                writer.writeString(4, this.msgContent);
            if (this.readMsgId != 0)
                writer.writeUint64(5, this.readMsgId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatMsg {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatMsg();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.senderUid = reader.readUint64();
                        break;
                    case 2:
                        message.sentTsMs = reader.readUint64();
                        break;
                    case 3:
                        message.msgType = reader.readEnum();
                        break;
                    case 4:
                        message.msgContent = reader.readString();
                        break;
                    case 5:
                        message.readMsgId = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChatMsg {
            return ChatMsg.deserialize(bytes);
        }
    }
    export class ChatConvMsg extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            seqId?: number;
            receiverId?: ChatPeerId;
            msg?: ChatMsg;
            convMsgId?: number;
            randMsgId?: number;
            isRead?: boolean;
            status?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("seqId" in data && data.seqId != undefined) {
                    this.seqId = data.seqId;
                }
                if ("receiverId" in data && data.receiverId != undefined) {
                    this.receiverId = data.receiverId;
                }
                if ("msg" in data && data.msg != undefined) {
                    this.msg = data.msg;
                }
                if ("convMsgId" in data && data.convMsgId != undefined) {
                    this.convMsgId = data.convMsgId;
                }
                if ("randMsgId" in data && data.randMsgId != undefined) {
                    this.randMsgId = data.randMsgId;
                }
                if ("isRead" in data && data.isRead != undefined) {
                    this.isRead = data.isRead;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get seqId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set seqId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get receiverId() {
            return pb_1.Message.getWrapperField(this, ChatPeerId, 2) as ChatPeerId;
        }
        set receiverId(value: ChatPeerId) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_receiverId() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get msg() {
            return pb_1.Message.getWrapperField(this, ChatMsg, 3) as ChatMsg;
        }
        set msg(value: ChatMsg) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_msg() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get convMsgId() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set convMsgId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get randMsgId() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set randMsgId(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get isRead() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set isRead(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set status(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            seqId?: number;
            receiverId?: ReturnType<typeof ChatPeerId.prototype.toObject>;
            msg?: ReturnType<typeof ChatMsg.prototype.toObject>;
            convMsgId?: number;
            randMsgId?: number;
            isRead?: boolean;
            status?: number;
        }): ChatConvMsg {
            const message = new ChatConvMsg({});
            if (data.seqId != null) {
                message.seqId = data.seqId;
            }
            if (data.receiverId != null) {
                message.receiverId = ChatPeerId.fromObject(data.receiverId);
            }
            if (data.msg != null) {
                message.msg = ChatMsg.fromObject(data.msg);
            }
            if (data.convMsgId != null) {
                message.convMsgId = data.convMsgId;
            }
            if (data.randMsgId != null) {
                message.randMsgId = data.randMsgId;
            }
            if (data.isRead != null) {
                message.isRead = data.isRead;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                seqId?: number;
                receiverId?: ReturnType<typeof ChatPeerId.prototype.toObject>;
                msg?: ReturnType<typeof ChatMsg.prototype.toObject>;
                convMsgId?: number;
                randMsgId?: number;
                isRead?: boolean;
                status?: number;
            } = {};
            if (this.seqId != null) {
                data.seqId = this.seqId;
            }
            if (this.receiverId != null) {
                data.receiverId = this.receiverId.toObject();
            }
            if (this.msg != null) {
                data.msg = this.msg.toObject();
            }
            if (this.convMsgId != null) {
                data.convMsgId = this.convMsgId;
            }
            if (this.randMsgId != null) {
                data.randMsgId = this.randMsgId;
            }
            if (this.isRead != null) {
                data.isRead = this.isRead;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.seqId != 0)
                writer.writeUint64(1, this.seqId);
            if (this.has_receiverId)
                writer.writeMessage(2, this.receiverId, () => this.receiverId.serialize(writer));
            if (this.has_msg)
                writer.writeMessage(3, this.msg, () => this.msg.serialize(writer));
            if (this.convMsgId != 0)
                writer.writeUint64(4, this.convMsgId);
            if (this.randMsgId != 0)
                writer.writeUint64(5, this.randMsgId);
            if (this.isRead != false)
                writer.writeBool(6, this.isRead);
            if (this.status != 0)
                writer.writeUint32(7, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatConvMsg {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatConvMsg();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.seqId = reader.readUint64();
                        break;
                    case 2:
                        reader.readMessage(message.receiverId, () => message.receiverId = ChatPeerId.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.msg, () => message.msg = ChatMsg.deserialize(reader));
                        break;
                    case 4:
                        message.convMsgId = reader.readUint64();
                        break;
                    case 5:
                        message.randMsgId = reader.readUint64();
                        break;
                    case 6:
                        message.isRead = reader.readBool();
                        break;
                    case 7:
                        message.status = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChatConvMsg {
            return ChatConvMsg.deserialize(bytes);
        }
    }
    export class ChatConvInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            convId?: number;
            uidList?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("convId" in data && data.convId != undefined) {
                    this.convId = data.convId;
                }
                if ("uidList" in data && data.uidList != undefined) {
                    this.uidList = data.uidList;
                }
            }
        }
        get convId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set convId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get uidList() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
        }
        set uidList(value: number[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            convId?: number;
            uidList?: number[];
        }): ChatConvInfo {
            const message = new ChatConvInfo({});
            if (data.convId != null) {
                message.convId = data.convId;
            }
            if (data.uidList != null) {
                message.uidList = data.uidList;
            }
            return message;
        }
        toObject() {
            const data: {
                convId?: number;
                uidList?: number[];
            } = {};
            if (this.convId != null) {
                data.convId = this.convId;
            }
            if (this.uidList != null) {
                data.uidList = this.uidList;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.convId != 0)
                writer.writeUint64(1, this.convId);
            if (this.uidList.length)
                writer.writePackedUint64(2, this.uidList);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatConvInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatConvInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.convId = reader.readUint64();
                        break;
                    case 2:
                        message.uidList = reader.readPackedUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChatConvInfo {
            return ChatConvInfo.deserialize(bytes);
        }
    }
    export class ChatSendMsgReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sessId?: string;
            convMsg?: ChatConvMsg;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sessId" in data && data.sessId != undefined) {
                    this.sessId = data.sessId;
                }
                if ("convMsg" in data && data.convMsg != undefined) {
                    this.convMsg = data.convMsg;
                }
            }
        }
        get sessId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sessId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get convMsg() {
            return pb_1.Message.getWrapperField(this, ChatConvMsg, 2) as ChatConvMsg;
        }
        set convMsg(value: ChatConvMsg) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_convMsg() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            sessId?: string;
            convMsg?: ReturnType<typeof ChatConvMsg.prototype.toObject>;
        }): ChatSendMsgReq {
            const message = new ChatSendMsgReq({});
            if (data.sessId != null) {
                message.sessId = data.sessId;
            }
            if (data.convMsg != null) {
                message.convMsg = ChatConvMsg.fromObject(data.convMsg);
            }
            return message;
        }
        toObject() {
            const data: {
                sessId?: string;
                convMsg?: ReturnType<typeof ChatConvMsg.prototype.toObject>;
            } = {};
            if (this.sessId != null) {
                data.sessId = this.sessId;
            }
            if (this.convMsg != null) {
                data.convMsg = this.convMsg.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sessId.length)
                writer.writeString(1, this.sessId);
            if (this.has_convMsg)
                writer.writeMessage(2, this.convMsg, () => this.convMsg.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatSendMsgReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatSendMsgReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sessId = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.convMsg, () => message.convMsg = ChatConvMsg.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChatSendMsgReq {
            return ChatSendMsgReq.deserialize(bytes);
        }
    }
    export class ChatSendMsgRes extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            errCode?: ErrCode;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("errCode" in data && data.errCode != undefined) {
                    this.errCode = data.errCode;
                }
            }
        }
        get errCode() {
            return pb_1.Message.getFieldWithDefault(this, 1, ErrCode.emErrCode_Ok) as ErrCode;
        }
        set errCode(value: ErrCode) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            errCode?: ErrCode;
        }): ChatSendMsgRes {
            const message = new ChatSendMsgRes({});
            if (data.errCode != null) {
                message.errCode = data.errCode;
            }
            return message;
        }
        toObject() {
            const data: {
                errCode?: ErrCode;
            } = {};
            if (this.errCode != null) {
                data.errCode = this.errCode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.errCode != ErrCode.emErrCode_Ok)
                writer.writeEnum(1, this.errCode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatSendMsgRes {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatSendMsgRes();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.errCode = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChatSendMsgRes {
            return ChatSendMsgRes.deserialize(bytes);
        }
    }
    export class ChatMarkReadReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sessId?: string;
            convId?: ChatPeerId;
            readMsgId?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sessId" in data && data.sessId != undefined) {
                    this.sessId = data.sessId;
                }
                if ("convId" in data && data.convId != undefined) {
                    this.convId = data.convId;
                }
                if ("readMsgId" in data && data.readMsgId != undefined) {
                    this.readMsgId = data.readMsgId;
                }
            }
        }
        get sessId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sessId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get convId() {
            return pb_1.Message.getWrapperField(this, ChatPeerId, 2) as ChatPeerId;
        }
        set convId(value: ChatPeerId) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_convId() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get readMsgId() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set readMsgId(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            sessId?: string;
            convId?: ReturnType<typeof ChatPeerId.prototype.toObject>;
            readMsgId?: number;
        }): ChatMarkReadReq {
            const message = new ChatMarkReadReq({});
            if (data.sessId != null) {
                message.sessId = data.sessId;
            }
            if (data.convId != null) {
                message.convId = ChatPeerId.fromObject(data.convId);
            }
            if (data.readMsgId != null) {
                message.readMsgId = data.readMsgId;
            }
            return message;
        }
        toObject() {
            const data: {
                sessId?: string;
                convId?: ReturnType<typeof ChatPeerId.prototype.toObject>;
                readMsgId?: number;
            } = {};
            if (this.sessId != null) {
                data.sessId = this.sessId;
            }
            if (this.convId != null) {
                data.convId = this.convId.toObject();
            }
            if (this.readMsgId != null) {
                data.readMsgId = this.readMsgId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sessId.length)
                writer.writeString(1, this.sessId);
            if (this.has_convId)
                writer.writeMessage(2, this.convId, () => this.convId.serialize(writer));
            if (this.readMsgId != 0)
                writer.writeUint64(3, this.readMsgId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatMarkReadReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatMarkReadReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sessId = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.convId, () => message.convId = ChatPeerId.deserialize(reader));
                        break;
                    case 3:
                        message.readMsgId = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChatMarkReadReq {
            return ChatMarkReadReq.deserialize(bytes);
        }
    }
    export class ChatMarkReadRes extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            errCode?: ErrCode;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("errCode" in data && data.errCode != undefined) {
                    this.errCode = data.errCode;
                }
            }
        }
        get errCode() {
            return pb_1.Message.getFieldWithDefault(this, 1, ErrCode.emErrCode_Ok) as ErrCode;
        }
        set errCode(value: ErrCode) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            errCode?: ErrCode;
        }): ChatMarkReadRes {
            const message = new ChatMarkReadRes({});
            if (data.errCode != null) {
                message.errCode = data.errCode;
            }
            return message;
        }
        toObject() {
            const data: {
                errCode?: ErrCode;
            } = {};
            if (this.errCode != null) {
                data.errCode = this.errCode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.errCode != ErrCode.emErrCode_Ok)
                writer.writeEnum(1, this.errCode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatMarkReadRes {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatMarkReadRes();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.errCode = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChatMarkReadRes {
            return ChatMarkReadRes.deserialize(bytes);
        }
    }
    export class GetUpdateListReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sessId?: string;
            localSeqId?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sessId" in data && data.sessId != undefined) {
                    this.sessId = data.sessId;
                }
                if ("localSeqId" in data && data.localSeqId != undefined) {
                    this.localSeqId = data.localSeqId;
                }
            }
        }
        get sessId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sessId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get localSeqId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set localSeqId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            sessId?: string;
            localSeqId?: number;
        }): GetUpdateListReq {
            const message = new GetUpdateListReq({});
            if (data.sessId != null) {
                message.sessId = data.sessId;
            }
            if (data.localSeqId != null) {
                message.localSeqId = data.localSeqId;
            }
            return message;
        }
        toObject() {
            const data: {
                sessId?: string;
                localSeqId?: number;
            } = {};
            if (this.sessId != null) {
                data.sessId = this.sessId;
            }
            if (this.localSeqId != null) {
                data.localSeqId = this.localSeqId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sessId.length)
                writer.writeString(1, this.sessId);
            if (this.localSeqId != 0)
                writer.writeUint64(2, this.localSeqId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUpdateListReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUpdateListReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sessId = reader.readString();
                        break;
                    case 2:
                        message.localSeqId = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUpdateListReq {
            return GetUpdateListReq.deserialize(bytes);
        }
    }
    export class GetUpdateListRes extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            errCode?: ErrCode;
            seqId?: number;
            msgList?: ChatConvMsg[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("errCode" in data && data.errCode != undefined) {
                    this.errCode = data.errCode;
                }
                if ("seqId" in data && data.seqId != undefined) {
                    this.seqId = data.seqId;
                }
                if ("msgList" in data && data.msgList != undefined) {
                    this.msgList = data.msgList;
                }
            }
        }
        get errCode() {
            return pb_1.Message.getFieldWithDefault(this, 1, ErrCode.emErrCode_Ok) as ErrCode;
        }
        set errCode(value: ErrCode) {
            pb_1.Message.setField(this, 1, value);
        }
        get seqId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set seqId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get msgList() {
            return pb_1.Message.getRepeatedWrapperField(this, ChatConvMsg, 3) as ChatConvMsg[];
        }
        set msgList(value: ChatConvMsg[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            errCode?: ErrCode;
            seqId?: number;
            msgList?: ReturnType<typeof ChatConvMsg.prototype.toObject>[];
        }): GetUpdateListRes {
            const message = new GetUpdateListRes({});
            if (data.errCode != null) {
                message.errCode = data.errCode;
            }
            if (data.seqId != null) {
                message.seqId = data.seqId;
            }
            if (data.msgList != null) {
                message.msgList = data.msgList.map(item => ChatConvMsg.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                errCode?: ErrCode;
                seqId?: number;
                msgList?: ReturnType<typeof ChatConvMsg.prototype.toObject>[];
            } = {};
            if (this.errCode != null) {
                data.errCode = this.errCode;
            }
            if (this.seqId != null) {
                data.seqId = this.seqId;
            }
            if (this.msgList != null) {
                data.msgList = this.msgList.map((item: ChatConvMsg) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.errCode != ErrCode.emErrCode_Ok)
                writer.writeEnum(1, this.errCode);
            if (this.seqId != 0)
                writer.writeUint64(2, this.seqId);
            if (this.msgList.length)
                writer.writeRepeatedMessage(3, this.msgList, (item: ChatConvMsg) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUpdateListRes {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUpdateListRes();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.errCode = reader.readEnum();
                        break;
                    case 2:
                        message.seqId = reader.readUint64();
                        break;
                    case 3:
                        reader.readMessage(message.msgList, () => pb_1.Message.addToRepeatedWrapperField(message, 3, ChatConvMsg.deserialize(reader), ChatConvMsg));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUpdateListRes {
            return GetUpdateListRes.deserialize(bytes);
        }
    }
    export abstract class UnimplementedGrpcApiService {
        static definition = {
            SessUserLogin: {
                path: "/gen_grpc.GrpcApi/SessUserLogin",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SessUserLoginReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SessUserLoginReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SessUserLoginRes) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SessUserLoginRes.deserialize(new Uint8Array(bytes))
            },
            SessUserLogout: {
                path: "/gen_grpc.GrpcApi/SessUserLogout",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SessUserLogoutReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SessUserLogoutReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SessUserLogoutRes) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SessUserLogoutRes.deserialize(new Uint8Array(bytes))
            },
            UmRegister: {
                path: "/gen_grpc.GrpcApi/UmRegister",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UmRegisterReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UmRegisterReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UmRegisterRes) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UmRegisterRes.deserialize(new Uint8Array(bytes))
            },
            UmUnregister: {
                path: "/gen_grpc.GrpcApi/UmUnregister",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UmUnregisterReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UmUnregisterReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UmUnregisterRes) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UmUnregisterRes.deserialize(new Uint8Array(bytes))
            },
            UmUserUpdateInfo: {
                path: "/gen_grpc.GrpcApi/UmUserUpdateInfo",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UmUserUpdateInfoReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UmUserUpdateInfoReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UmUserUpdateInfoRes) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UmUserUpdateInfoRes.deserialize(new Uint8Array(bytes))
            },
            UmContactGetList: {
                path: "/gen_grpc.GrpcApi/UmContactGetList",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UmContactGetListReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UmContactGetListReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UmContactGetListRes) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UmContactGetListRes.deserialize(new Uint8Array(bytes))
            },
            UmContactGetInfo: {
                path: "/gen_grpc.GrpcApi/UmContactGetInfo",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UmContactGetInfoReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UmContactGetInfoReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UmContactGetInfoRes) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UmContactGetInfoRes.deserialize(new Uint8Array(bytes))
            },
            UmContactFind: {
                path: "/gen_grpc.GrpcApi/UmContactFind",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UmContactFindReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UmContactFindReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UmContactFindRes) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UmContactFindRes.deserialize(new Uint8Array(bytes))
            },
            UmContactAddRequest: {
                path: "/gen_grpc.GrpcApi/UmContactAddRequest",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UmContactAddRequestReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UmContactAddRequestReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UmContactAddRequestRes) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UmContactAddRequestRes.deserialize(new Uint8Array(bytes))
            },
            UmContactAccept: {
                path: "/gen_grpc.GrpcApi/UmContactAccept",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UmContactAcceptReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UmContactAcceptReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UmContactAcceptRes) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UmContactAcceptRes.deserialize(new Uint8Array(bytes))
            },
            UmContactReject: {
                path: "/gen_grpc.GrpcApi/UmContactReject",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UmContactRejectReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UmContactRejectReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UmContactRejectRes) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UmContactRejectRes.deserialize(new Uint8Array(bytes))
            },
            UmContactDel: {
                path: "/gen_grpc.GrpcApi/UmContactDel",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UmContactDelReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UmContactDelReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UmContactDelRes) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UmContactDelRes.deserialize(new Uint8Array(bytes))
            },
            UmGroupGetList: {
                path: "/gen_grpc.GrpcApi/UmGroupGetList",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UmGroupGetListReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UmGroupGetListReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UmGroupGetListRes) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UmGroupGetListRes.deserialize(new Uint8Array(bytes))
            },
            UmGroupGetInfo: {
                path: "/gen_grpc.GrpcApi/UmGroupGetInfo",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UmGroupGetInfoReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UmGroupGetInfoReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UmGroupGetInfoRes) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UmGroupGetInfoRes.deserialize(new Uint8Array(bytes))
            },
            UmGroupUpdateInfo: {
                path: "/gen_grpc.GrpcApi/UmGroupUpdateInfo",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UmGroupUpdateInfoReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UmGroupUpdateInfoReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UmGroupUpdateInfoRes) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UmGroupUpdateInfoRes.deserialize(new Uint8Array(bytes))
            },
            UmGroupFind: {
                path: "/gen_grpc.GrpcApi/UmGroupFind",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UmGroupFindReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UmGroupFindReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UmGroupFindRes) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UmGroupFindRes.deserialize(new Uint8Array(bytes))
            },
            UmGroupCreate: {
                path: "/gen_grpc.GrpcApi/UmGroupCreate",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UmGroupCreateReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UmGroupCreateReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UmGroupCreateRes) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UmGroupCreateRes.deserialize(new Uint8Array(bytes))
            },
            UmGroupDelete: {
                path: "/gen_grpc.GrpcApi/UmGroupDelete",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UmGroupDeleteReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UmGroupDeleteReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UmGroupDeleteRes) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UmGroupDeleteRes.deserialize(new Uint8Array(bytes))
            },
            UmGroupGetMemList: {
                path: "/gen_grpc.GrpcApi/UmGroupGetMemList",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UmGroupGetMemListReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UmGroupGetMemListReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UmGroupGetMemListRes) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UmGroupGetMemListRes.deserialize(new Uint8Array(bytes))
            },
            UmGroupJoinRequest: {
                path: "/gen_grpc.GrpcApi/UmGroupJoinRequest",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UmGroupJoinRequestReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UmGroupJoinRequestReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UmGroupJoinRequestRes) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UmGroupJoinRequestRes.deserialize(new Uint8Array(bytes))
            },
            UmGroupAccept: {
                path: "/gen_grpc.GrpcApi/UmGroupAccept",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UmGroupAcceptReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UmGroupAcceptReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UmGroupAcceptRes) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UmGroupAcceptRes.deserialize(new Uint8Array(bytes))
            },
            UmGroupReject: {
                path: "/gen_grpc.GrpcApi/UmGroupReject",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UmGroupRejectReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UmGroupRejectReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UmGroupRejectRes) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UmGroupRejectRes.deserialize(new Uint8Array(bytes))
            },
            UmGroupLeave: {
                path: "/gen_grpc.GrpcApi/UmGroupLeave",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UmGroupLeaveReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UmGroupLeaveReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UmGroupLeaveRes) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UmGroupLeaveRes.deserialize(new Uint8Array(bytes))
            },
            UmGroupAddMem: {
                path: "/gen_grpc.GrpcApi/UmGroupAddMem",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UmGroupAddMemReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UmGroupAddMemReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UmGroupAddMemRes) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UmGroupAddMemRes.deserialize(new Uint8Array(bytes))
            },
            UmGroupDelMem: {
                path: "/gen_grpc.GrpcApi/UmGroupDelMem",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UmGroupDelMemReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UmGroupDelMemReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UmGroupDelMemRes) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UmGroupDelMemRes.deserialize(new Uint8Array(bytes))
            },
            UmGroupUpdateMem: {
                path: "/gen_grpc.GrpcApi/UmGroupUpdateMem",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UmGroupUpdateMemReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UmGroupUpdateMemReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UmGroupUpdateMemRes) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UmGroupUpdateMemRes.deserialize(new Uint8Array(bytes))
            },
            ChatSendMsg: {
                path: "/gen_grpc.GrpcApi/ChatSendMsg",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ChatSendMsgReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ChatSendMsgReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ChatSendMsgRes) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ChatSendMsgRes.deserialize(new Uint8Array(bytes))
            },
            ChatMarkRead: {
                path: "/gen_grpc.GrpcApi/ChatMarkRead",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ChatMarkReadReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ChatMarkReadReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ChatMarkReadRes) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ChatMarkReadRes.deserialize(new Uint8Array(bytes))
            },
            GetUpdateList: {
                path: "/gen_grpc.GrpcApi/GetUpdateList",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetUpdateListReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetUpdateListReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetUpdateListRes) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetUpdateListRes.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract SessUserLogin(call: grpc_1.ServerUnaryCall<SessUserLoginReq, SessUserLoginRes>, callback: grpc_1.sendUnaryData<SessUserLoginRes>): void;
        abstract SessUserLogout(call: grpc_1.ServerUnaryCall<SessUserLogoutReq, SessUserLogoutRes>, callback: grpc_1.sendUnaryData<SessUserLogoutRes>): void;
        abstract UmRegister(call: grpc_1.ServerUnaryCall<UmRegisterReq, UmRegisterRes>, callback: grpc_1.sendUnaryData<UmRegisterRes>): void;
        abstract UmUnregister(call: grpc_1.ServerUnaryCall<UmUnregisterReq, UmUnregisterRes>, callback: grpc_1.sendUnaryData<UmUnregisterRes>): void;
        abstract UmUserUpdateInfo(call: grpc_1.ServerUnaryCall<UmUserUpdateInfoReq, UmUserUpdateInfoRes>, callback: grpc_1.sendUnaryData<UmUserUpdateInfoRes>): void;
        abstract UmContactGetList(call: grpc_1.ServerUnaryCall<UmContactGetListReq, UmContactGetListRes>, callback: grpc_1.sendUnaryData<UmContactGetListRes>): void;
        abstract UmContactGetInfo(call: grpc_1.ServerUnaryCall<UmContactGetInfoReq, UmContactGetInfoRes>, callback: grpc_1.sendUnaryData<UmContactGetInfoRes>): void;
        abstract UmContactFind(call: grpc_1.ServerUnaryCall<UmContactFindReq, UmContactFindRes>, callback: grpc_1.sendUnaryData<UmContactFindRes>): void;
        abstract UmContactAddRequest(call: grpc_1.ServerUnaryCall<UmContactAddRequestReq, UmContactAddRequestRes>, callback: grpc_1.sendUnaryData<UmContactAddRequestRes>): void;
        abstract UmContactAccept(call: grpc_1.ServerUnaryCall<UmContactAcceptReq, UmContactAcceptRes>, callback: grpc_1.sendUnaryData<UmContactAcceptRes>): void;
        abstract UmContactReject(call: grpc_1.ServerUnaryCall<UmContactRejectReq, UmContactRejectRes>, callback: grpc_1.sendUnaryData<UmContactRejectRes>): void;
        abstract UmContactDel(call: grpc_1.ServerUnaryCall<UmContactDelReq, UmContactDelRes>, callback: grpc_1.sendUnaryData<UmContactDelRes>): void;
        abstract UmGroupGetList(call: grpc_1.ServerUnaryCall<UmGroupGetListReq, UmGroupGetListRes>, callback: grpc_1.sendUnaryData<UmGroupGetListRes>): void;
        abstract UmGroupGetInfo(call: grpc_1.ServerUnaryCall<UmGroupGetInfoReq, UmGroupGetInfoRes>, callback: grpc_1.sendUnaryData<UmGroupGetInfoRes>): void;
        abstract UmGroupUpdateInfo(call: grpc_1.ServerUnaryCall<UmGroupUpdateInfoReq, UmGroupUpdateInfoRes>, callback: grpc_1.sendUnaryData<UmGroupUpdateInfoRes>): void;
        abstract UmGroupFind(call: grpc_1.ServerUnaryCall<UmGroupFindReq, UmGroupFindRes>, callback: grpc_1.sendUnaryData<UmGroupFindRes>): void;
        abstract UmGroupCreate(call: grpc_1.ServerUnaryCall<UmGroupCreateReq, UmGroupCreateRes>, callback: grpc_1.sendUnaryData<UmGroupCreateRes>): void;
        abstract UmGroupDelete(call: grpc_1.ServerUnaryCall<UmGroupDeleteReq, UmGroupDeleteRes>, callback: grpc_1.sendUnaryData<UmGroupDeleteRes>): void;
        abstract UmGroupGetMemList(call: grpc_1.ServerUnaryCall<UmGroupGetMemListReq, UmGroupGetMemListRes>, callback: grpc_1.sendUnaryData<UmGroupGetMemListRes>): void;
        abstract UmGroupJoinRequest(call: grpc_1.ServerUnaryCall<UmGroupJoinRequestReq, UmGroupJoinRequestRes>, callback: grpc_1.sendUnaryData<UmGroupJoinRequestRes>): void;
        abstract UmGroupAccept(call: grpc_1.ServerUnaryCall<UmGroupAcceptReq, UmGroupAcceptRes>, callback: grpc_1.sendUnaryData<UmGroupAcceptRes>): void;
        abstract UmGroupReject(call: grpc_1.ServerUnaryCall<UmGroupRejectReq, UmGroupRejectRes>, callback: grpc_1.sendUnaryData<UmGroupRejectRes>): void;
        abstract UmGroupLeave(call: grpc_1.ServerUnaryCall<UmGroupLeaveReq, UmGroupLeaveRes>, callback: grpc_1.sendUnaryData<UmGroupLeaveRes>): void;
        abstract UmGroupAddMem(call: grpc_1.ServerUnaryCall<UmGroupAddMemReq, UmGroupAddMemRes>, callback: grpc_1.sendUnaryData<UmGroupAddMemRes>): void;
        abstract UmGroupDelMem(call: grpc_1.ServerUnaryCall<UmGroupDelMemReq, UmGroupDelMemRes>, callback: grpc_1.sendUnaryData<UmGroupDelMemRes>): void;
        abstract UmGroupUpdateMem(call: grpc_1.ServerUnaryCall<UmGroupUpdateMemReq, UmGroupUpdateMemRes>, callback: grpc_1.sendUnaryData<UmGroupUpdateMemRes>): void;
        abstract ChatSendMsg(call: grpc_1.ServerUnaryCall<ChatSendMsgReq, ChatSendMsgRes>, callback: grpc_1.sendUnaryData<ChatSendMsgRes>): void;
        abstract ChatMarkRead(call: grpc_1.ServerUnaryCall<ChatMarkReadReq, ChatMarkReadRes>, callback: grpc_1.sendUnaryData<ChatMarkReadRes>): void;
        abstract GetUpdateList(call: grpc_1.ServerUnaryCall<GetUpdateListReq, GetUpdateListRes>, callback: grpc_1.sendUnaryData<GetUpdateListRes>): void;
    }
    export class GrpcApiClient {
        private _address: string;
        private _client: grpc_web_1.GrpcWebClientBase;
        constructor(address: string, credentials?: Object, options?: grpc_web_1.GrpcWebClientBaseOptions) {
            if (!options)
                options = {};
            options.format = options.format || "text";
            this._address = address;
            this._client = new grpc_web_1.GrpcWebClientBase(options);
        }
        private static SessUserLogin = new grpc_web_1.MethodDescriptor<SessUserLoginReq, SessUserLoginRes>("/gen_grpc.GrpcApi/SessUserLogin", grpc_web_1.MethodType.UNARY, SessUserLoginReq, SessUserLoginRes, (message: SessUserLoginReq) => message.serialize(), SessUserLoginRes.deserialize);
        SessUserLogin(message: SessUserLoginReq, metadata: grpc_web_1.Metadata | null) {
            return this._client.thenableCall<SessUserLoginReq, SessUserLoginRes>(this._address + "/gen_grpc.GrpcApi/SessUserLogin", message, metadata || {}, GrpcApiClient.SessUserLogin);
        }
        private static SessUserLogout = new grpc_web_1.MethodDescriptor<SessUserLogoutReq, SessUserLogoutRes>("/gen_grpc.GrpcApi/SessUserLogout", grpc_web_1.MethodType.UNARY, SessUserLogoutReq, SessUserLogoutRes, (message: SessUserLogoutReq) => message.serialize(), SessUserLogoutRes.deserialize);
        SessUserLogout(message: SessUserLogoutReq, metadata: grpc_web_1.Metadata | null) {
            return this._client.thenableCall<SessUserLogoutReq, SessUserLogoutRes>(this._address + "/gen_grpc.GrpcApi/SessUserLogout", message, metadata || {}, GrpcApiClient.SessUserLogout);
        }
        private static UmRegister = new grpc_web_1.MethodDescriptor<UmRegisterReq, UmRegisterRes>("/gen_grpc.GrpcApi/UmRegister", grpc_web_1.MethodType.UNARY, UmRegisterReq, UmRegisterRes, (message: UmRegisterReq) => message.serialize(), UmRegisterRes.deserialize);
        UmRegister(message: UmRegisterReq, metadata: grpc_web_1.Metadata | null) {
            return this._client.thenableCall<UmRegisterReq, UmRegisterRes>(this._address + "/gen_grpc.GrpcApi/UmRegister", message, metadata || {}, GrpcApiClient.UmRegister);
        }
        private static UmUnregister = new grpc_web_1.MethodDescriptor<UmUnregisterReq, UmUnregisterRes>("/gen_grpc.GrpcApi/UmUnregister", grpc_web_1.MethodType.UNARY, UmUnregisterReq, UmUnregisterRes, (message: UmUnregisterReq) => message.serialize(), UmUnregisterRes.deserialize);
        UmUnregister(message: UmUnregisterReq, metadata: grpc_web_1.Metadata | null) {
            return this._client.thenableCall<UmUnregisterReq, UmUnregisterRes>(this._address + "/gen_grpc.GrpcApi/UmUnregister", message, metadata || {}, GrpcApiClient.UmUnregister);
        }
        private static UmUserUpdateInfo = new grpc_web_1.MethodDescriptor<UmUserUpdateInfoReq, UmUserUpdateInfoRes>("/gen_grpc.GrpcApi/UmUserUpdateInfo", grpc_web_1.MethodType.UNARY, UmUserUpdateInfoReq, UmUserUpdateInfoRes, (message: UmUserUpdateInfoReq) => message.serialize(), UmUserUpdateInfoRes.deserialize);
        UmUserUpdateInfo(message: UmUserUpdateInfoReq, metadata: grpc_web_1.Metadata | null) {
            return this._client.thenableCall<UmUserUpdateInfoReq, UmUserUpdateInfoRes>(this._address + "/gen_grpc.GrpcApi/UmUserUpdateInfo", message, metadata || {}, GrpcApiClient.UmUserUpdateInfo);
        }
        private static UmContactGetList = new grpc_web_1.MethodDescriptor<UmContactGetListReq, UmContactGetListRes>("/gen_grpc.GrpcApi/UmContactGetList", grpc_web_1.MethodType.UNARY, UmContactGetListReq, UmContactGetListRes, (message: UmContactGetListReq) => message.serialize(), UmContactGetListRes.deserialize);
        UmContactGetList(message: UmContactGetListReq, metadata: grpc_web_1.Metadata | null) {
            return this._client.thenableCall<UmContactGetListReq, UmContactGetListRes>(this._address + "/gen_grpc.GrpcApi/UmContactGetList", message, metadata || {}, GrpcApiClient.UmContactGetList);
        }
        private static UmContactGetInfo = new grpc_web_1.MethodDescriptor<UmContactGetInfoReq, UmContactGetInfoRes>("/gen_grpc.GrpcApi/UmContactGetInfo", grpc_web_1.MethodType.UNARY, UmContactGetInfoReq, UmContactGetInfoRes, (message: UmContactGetInfoReq) => message.serialize(), UmContactGetInfoRes.deserialize);
        UmContactGetInfo(message: UmContactGetInfoReq, metadata: grpc_web_1.Metadata | null) {
            return this._client.thenableCall<UmContactGetInfoReq, UmContactGetInfoRes>(this._address + "/gen_grpc.GrpcApi/UmContactGetInfo", message, metadata || {}, GrpcApiClient.UmContactGetInfo);
        }
        private static UmContactFind = new grpc_web_1.MethodDescriptor<UmContactFindReq, UmContactFindRes>("/gen_grpc.GrpcApi/UmContactFind", grpc_web_1.MethodType.UNARY, UmContactFindReq, UmContactFindRes, (message: UmContactFindReq) => message.serialize(), UmContactFindRes.deserialize);
        UmContactFind(message: UmContactFindReq, metadata: grpc_web_1.Metadata | null) {
            return this._client.thenableCall<UmContactFindReq, UmContactFindRes>(this._address + "/gen_grpc.GrpcApi/UmContactFind", message, metadata || {}, GrpcApiClient.UmContactFind);
        }
        private static UmContactAddRequest = new grpc_web_1.MethodDescriptor<UmContactAddRequestReq, UmContactAddRequestRes>("/gen_grpc.GrpcApi/UmContactAddRequest", grpc_web_1.MethodType.UNARY, UmContactAddRequestReq, UmContactAddRequestRes, (message: UmContactAddRequestReq) => message.serialize(), UmContactAddRequestRes.deserialize);
        UmContactAddRequest(message: UmContactAddRequestReq, metadata: grpc_web_1.Metadata | null) {
            return this._client.thenableCall<UmContactAddRequestReq, UmContactAddRequestRes>(this._address + "/gen_grpc.GrpcApi/UmContactAddRequest", message, metadata || {}, GrpcApiClient.UmContactAddRequest);
        }
        private static UmContactAccept = new grpc_web_1.MethodDescriptor<UmContactAcceptReq, UmContactAcceptRes>("/gen_grpc.GrpcApi/UmContactAccept", grpc_web_1.MethodType.UNARY, UmContactAcceptReq, UmContactAcceptRes, (message: UmContactAcceptReq) => message.serialize(), UmContactAcceptRes.deserialize);
        UmContactAccept(message: UmContactAcceptReq, metadata: grpc_web_1.Metadata | null) {
            return this._client.thenableCall<UmContactAcceptReq, UmContactAcceptRes>(this._address + "/gen_grpc.GrpcApi/UmContactAccept", message, metadata || {}, GrpcApiClient.UmContactAccept);
        }
        private static UmContactReject = new grpc_web_1.MethodDescriptor<UmContactRejectReq, UmContactRejectRes>("/gen_grpc.GrpcApi/UmContactReject", grpc_web_1.MethodType.UNARY, UmContactRejectReq, UmContactRejectRes, (message: UmContactRejectReq) => message.serialize(), UmContactRejectRes.deserialize);
        UmContactReject(message: UmContactRejectReq, metadata: grpc_web_1.Metadata | null) {
            return this._client.thenableCall<UmContactRejectReq, UmContactRejectRes>(this._address + "/gen_grpc.GrpcApi/UmContactReject", message, metadata || {}, GrpcApiClient.UmContactReject);
        }
        private static UmContactDel = new grpc_web_1.MethodDescriptor<UmContactDelReq, UmContactDelRes>("/gen_grpc.GrpcApi/UmContactDel", grpc_web_1.MethodType.UNARY, UmContactDelReq, UmContactDelRes, (message: UmContactDelReq) => message.serialize(), UmContactDelRes.deserialize);
        UmContactDel(message: UmContactDelReq, metadata: grpc_web_1.Metadata | null) {
            return this._client.thenableCall<UmContactDelReq, UmContactDelRes>(this._address + "/gen_grpc.GrpcApi/UmContactDel", message, metadata || {}, GrpcApiClient.UmContactDel);
        }
        private static UmGroupGetList = new grpc_web_1.MethodDescriptor<UmGroupGetListReq, UmGroupGetListRes>("/gen_grpc.GrpcApi/UmGroupGetList", grpc_web_1.MethodType.UNARY, UmGroupGetListReq, UmGroupGetListRes, (message: UmGroupGetListReq) => message.serialize(), UmGroupGetListRes.deserialize);
        UmGroupGetList(message: UmGroupGetListReq, metadata: grpc_web_1.Metadata | null) {
            return this._client.thenableCall<UmGroupGetListReq, UmGroupGetListRes>(this._address + "/gen_grpc.GrpcApi/UmGroupGetList", message, metadata || {}, GrpcApiClient.UmGroupGetList);
        }
        private static UmGroupGetInfo = new grpc_web_1.MethodDescriptor<UmGroupGetInfoReq, UmGroupGetInfoRes>("/gen_grpc.GrpcApi/UmGroupGetInfo", grpc_web_1.MethodType.UNARY, UmGroupGetInfoReq, UmGroupGetInfoRes, (message: UmGroupGetInfoReq) => message.serialize(), UmGroupGetInfoRes.deserialize);
        UmGroupGetInfo(message: UmGroupGetInfoReq, metadata: grpc_web_1.Metadata | null) {
            return this._client.thenableCall<UmGroupGetInfoReq, UmGroupGetInfoRes>(this._address + "/gen_grpc.GrpcApi/UmGroupGetInfo", message, metadata || {}, GrpcApiClient.UmGroupGetInfo);
        }
        private static UmGroupUpdateInfo = new grpc_web_1.MethodDescriptor<UmGroupUpdateInfoReq, UmGroupUpdateInfoRes>("/gen_grpc.GrpcApi/UmGroupUpdateInfo", grpc_web_1.MethodType.UNARY, UmGroupUpdateInfoReq, UmGroupUpdateInfoRes, (message: UmGroupUpdateInfoReq) => message.serialize(), UmGroupUpdateInfoRes.deserialize);
        UmGroupUpdateInfo(message: UmGroupUpdateInfoReq, metadata: grpc_web_1.Metadata | null) {
            return this._client.thenableCall<UmGroupUpdateInfoReq, UmGroupUpdateInfoRes>(this._address + "/gen_grpc.GrpcApi/UmGroupUpdateInfo", message, metadata || {}, GrpcApiClient.UmGroupUpdateInfo);
        }
        private static UmGroupFind = new grpc_web_1.MethodDescriptor<UmGroupFindReq, UmGroupFindRes>("/gen_grpc.GrpcApi/UmGroupFind", grpc_web_1.MethodType.UNARY, UmGroupFindReq, UmGroupFindRes, (message: UmGroupFindReq) => message.serialize(), UmGroupFindRes.deserialize);
        UmGroupFind(message: UmGroupFindReq, metadata: grpc_web_1.Metadata | null) {
            return this._client.thenableCall<UmGroupFindReq, UmGroupFindRes>(this._address + "/gen_grpc.GrpcApi/UmGroupFind", message, metadata || {}, GrpcApiClient.UmGroupFind);
        }
        private static UmGroupCreate = new grpc_web_1.MethodDescriptor<UmGroupCreateReq, UmGroupCreateRes>("/gen_grpc.GrpcApi/UmGroupCreate", grpc_web_1.MethodType.UNARY, UmGroupCreateReq, UmGroupCreateRes, (message: UmGroupCreateReq) => message.serialize(), UmGroupCreateRes.deserialize);
        UmGroupCreate(message: UmGroupCreateReq, metadata: grpc_web_1.Metadata | null) {
            return this._client.thenableCall<UmGroupCreateReq, UmGroupCreateRes>(this._address + "/gen_grpc.GrpcApi/UmGroupCreate", message, metadata || {}, GrpcApiClient.UmGroupCreate);
        }
        private static UmGroupDelete = new grpc_web_1.MethodDescriptor<UmGroupDeleteReq, UmGroupDeleteRes>("/gen_grpc.GrpcApi/UmGroupDelete", grpc_web_1.MethodType.UNARY, UmGroupDeleteReq, UmGroupDeleteRes, (message: UmGroupDeleteReq) => message.serialize(), UmGroupDeleteRes.deserialize);
        UmGroupDelete(message: UmGroupDeleteReq, metadata: grpc_web_1.Metadata | null) {
            return this._client.thenableCall<UmGroupDeleteReq, UmGroupDeleteRes>(this._address + "/gen_grpc.GrpcApi/UmGroupDelete", message, metadata || {}, GrpcApiClient.UmGroupDelete);
        }
        private static UmGroupGetMemList = new grpc_web_1.MethodDescriptor<UmGroupGetMemListReq, UmGroupGetMemListRes>("/gen_grpc.GrpcApi/UmGroupGetMemList", grpc_web_1.MethodType.UNARY, UmGroupGetMemListReq, UmGroupGetMemListRes, (message: UmGroupGetMemListReq) => message.serialize(), UmGroupGetMemListRes.deserialize);
        UmGroupGetMemList(message: UmGroupGetMemListReq, metadata: grpc_web_1.Metadata | null) {
            return this._client.thenableCall<UmGroupGetMemListReq, UmGroupGetMemListRes>(this._address + "/gen_grpc.GrpcApi/UmGroupGetMemList", message, metadata || {}, GrpcApiClient.UmGroupGetMemList);
        }
        private static UmGroupJoinRequest = new grpc_web_1.MethodDescriptor<UmGroupJoinRequestReq, UmGroupJoinRequestRes>("/gen_grpc.GrpcApi/UmGroupJoinRequest", grpc_web_1.MethodType.UNARY, UmGroupJoinRequestReq, UmGroupJoinRequestRes, (message: UmGroupJoinRequestReq) => message.serialize(), UmGroupJoinRequestRes.deserialize);
        UmGroupJoinRequest(message: UmGroupJoinRequestReq, metadata: grpc_web_1.Metadata | null) {
            return this._client.thenableCall<UmGroupJoinRequestReq, UmGroupJoinRequestRes>(this._address + "/gen_grpc.GrpcApi/UmGroupJoinRequest", message, metadata || {}, GrpcApiClient.UmGroupJoinRequest);
        }
        private static UmGroupAccept = new grpc_web_1.MethodDescriptor<UmGroupAcceptReq, UmGroupAcceptRes>("/gen_grpc.GrpcApi/UmGroupAccept", grpc_web_1.MethodType.UNARY, UmGroupAcceptReq, UmGroupAcceptRes, (message: UmGroupAcceptReq) => message.serialize(), UmGroupAcceptRes.deserialize);
        UmGroupAccept(message: UmGroupAcceptReq, metadata: grpc_web_1.Metadata | null) {
            return this._client.thenableCall<UmGroupAcceptReq, UmGroupAcceptRes>(this._address + "/gen_grpc.GrpcApi/UmGroupAccept", message, metadata || {}, GrpcApiClient.UmGroupAccept);
        }
        private static UmGroupReject = new grpc_web_1.MethodDescriptor<UmGroupRejectReq, UmGroupRejectRes>("/gen_grpc.GrpcApi/UmGroupReject", grpc_web_1.MethodType.UNARY, UmGroupRejectReq, UmGroupRejectRes, (message: UmGroupRejectReq) => message.serialize(), UmGroupRejectRes.deserialize);
        UmGroupReject(message: UmGroupRejectReq, metadata: grpc_web_1.Metadata | null) {
            return this._client.thenableCall<UmGroupRejectReq, UmGroupRejectRes>(this._address + "/gen_grpc.GrpcApi/UmGroupReject", message, metadata || {}, GrpcApiClient.UmGroupReject);
        }
        private static UmGroupLeave = new grpc_web_1.MethodDescriptor<UmGroupLeaveReq, UmGroupLeaveRes>("/gen_grpc.GrpcApi/UmGroupLeave", grpc_web_1.MethodType.UNARY, UmGroupLeaveReq, UmGroupLeaveRes, (message: UmGroupLeaveReq) => message.serialize(), UmGroupLeaveRes.deserialize);
        UmGroupLeave(message: UmGroupLeaveReq, metadata: grpc_web_1.Metadata | null) {
            return this._client.thenableCall<UmGroupLeaveReq, UmGroupLeaveRes>(this._address + "/gen_grpc.GrpcApi/UmGroupLeave", message, metadata || {}, GrpcApiClient.UmGroupLeave);
        }
        private static UmGroupAddMem = new grpc_web_1.MethodDescriptor<UmGroupAddMemReq, UmGroupAddMemRes>("/gen_grpc.GrpcApi/UmGroupAddMem", grpc_web_1.MethodType.UNARY, UmGroupAddMemReq, UmGroupAddMemRes, (message: UmGroupAddMemReq) => message.serialize(), UmGroupAddMemRes.deserialize);
        UmGroupAddMem(message: UmGroupAddMemReq, metadata: grpc_web_1.Metadata | null) {
            return this._client.thenableCall<UmGroupAddMemReq, UmGroupAddMemRes>(this._address + "/gen_grpc.GrpcApi/UmGroupAddMem", message, metadata || {}, GrpcApiClient.UmGroupAddMem);
        }
        private static UmGroupDelMem = new grpc_web_1.MethodDescriptor<UmGroupDelMemReq, UmGroupDelMemRes>("/gen_grpc.GrpcApi/UmGroupDelMem", grpc_web_1.MethodType.UNARY, UmGroupDelMemReq, UmGroupDelMemRes, (message: UmGroupDelMemReq) => message.serialize(), UmGroupDelMemRes.deserialize);
        UmGroupDelMem(message: UmGroupDelMemReq, metadata: grpc_web_1.Metadata | null) {
            return this._client.thenableCall<UmGroupDelMemReq, UmGroupDelMemRes>(this._address + "/gen_grpc.GrpcApi/UmGroupDelMem", message, metadata || {}, GrpcApiClient.UmGroupDelMem);
        }
        private static UmGroupUpdateMem = new grpc_web_1.MethodDescriptor<UmGroupUpdateMemReq, UmGroupUpdateMemRes>("/gen_grpc.GrpcApi/UmGroupUpdateMem", grpc_web_1.MethodType.UNARY, UmGroupUpdateMemReq, UmGroupUpdateMemRes, (message: UmGroupUpdateMemReq) => message.serialize(), UmGroupUpdateMemRes.deserialize);
        UmGroupUpdateMem(message: UmGroupUpdateMemReq, metadata: grpc_web_1.Metadata | null) {
            return this._client.thenableCall<UmGroupUpdateMemReq, UmGroupUpdateMemRes>(this._address + "/gen_grpc.GrpcApi/UmGroupUpdateMem", message, metadata || {}, GrpcApiClient.UmGroupUpdateMem);
        }
        private static ChatSendMsg = new grpc_web_1.MethodDescriptor<ChatSendMsgReq, ChatSendMsgRes>("/gen_grpc.GrpcApi/ChatSendMsg", grpc_web_1.MethodType.UNARY, ChatSendMsgReq, ChatSendMsgRes, (message: ChatSendMsgReq) => message.serialize(), ChatSendMsgRes.deserialize);
        ChatSendMsg(message: ChatSendMsgReq, metadata: grpc_web_1.Metadata | null) {
            return this._client.thenableCall<ChatSendMsgReq, ChatSendMsgRes>(this._address + "/gen_grpc.GrpcApi/ChatSendMsg", message, metadata || {}, GrpcApiClient.ChatSendMsg);
        }
        private static ChatMarkRead = new grpc_web_1.MethodDescriptor<ChatMarkReadReq, ChatMarkReadRes>("/gen_grpc.GrpcApi/ChatMarkRead", grpc_web_1.MethodType.UNARY, ChatMarkReadReq, ChatMarkReadRes, (message: ChatMarkReadReq) => message.serialize(), ChatMarkReadRes.deserialize);
        ChatMarkRead(message: ChatMarkReadReq, metadata: grpc_web_1.Metadata | null) {
            return this._client.thenableCall<ChatMarkReadReq, ChatMarkReadRes>(this._address + "/gen_grpc.GrpcApi/ChatMarkRead", message, metadata || {}, GrpcApiClient.ChatMarkRead);
        }
        private static GetUpdateList = new grpc_web_1.MethodDescriptor<GetUpdateListReq, GetUpdateListRes>("/gen_grpc.GrpcApi/GetUpdateList", grpc_web_1.MethodType.UNARY, GetUpdateListReq, GetUpdateListRes, (message: GetUpdateListReq) => message.serialize(), GetUpdateListRes.deserialize);
        GetUpdateList(message: GetUpdateListReq, metadata: grpc_web_1.Metadata | null) {
            return this._client.thenableCall<GetUpdateListReq, GetUpdateListRes>(this._address + "/gen_grpc.GrpcApi/GetUpdateList", message, metadata || {}, GrpcApiClient.GetUpdateList);
        }
    }
}
